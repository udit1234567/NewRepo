@model  AIA.Life.Models.Opportunity.QuoteList
@using AIA.Presentation.Helpers
@using AIAResources;
@{

}
<style>
    /*.prospectinfo-item {
        padding-left: 8%;
        padding-right: 4%;
    }*/
</style>

@Html.HiddenFor(a => a.objProspect.ClientCode, new { id = "hdnClientCode" })
@Html.HiddenFor(a => a.objProspect.ContactID, new { @id = "hdnContactID" })
@Html.HiddenFor(a => a.objProspect.CurrentAge, new { id = "hdnCurrentAge" })
@Html.HiddenFor(a => a.objProspect.SamsLeadNumber, new { id = "hdnSamsLeadNumber" })
@Html.HiddenFor(a => a.objProspect.HdnAutOccupation, new { id = "hdnAutOccupation" })

<div class="col-lg-12" id="DivProspectInformation">

    <div class="col-md-12 col-sm-12 col-xs-12 col-lg-12 prospectinfo-item">
        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("Emirates Id")<span class="mandatory">*</span></label>
                @(Html.TextBoxFor(a => a.objProspect.NIC, new
                    {
                        @id = "txtNic",
                        @class = "form-control", @*@onchange = "FoundNIC_Loaddata(),FetchDOBGenderfromNIC('txtNic','dtProspectDOB','ddlGender','txtAge')"*@@onchange = "ValidateNICPopup()",
                        @maxlength = 12,
                        @onkeypress = "return isAlphaNumberKeybackwithOutSymbolSpace(event)",
                        @onkeyup = "return isAlphaNumberKeyback(event)"
                    }))

            </div>
        </div>

        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("Type")<span class="mandatory">*</span></label>
                @Html.DropDownListFor(a => a.objProspect.Type, new SelectList(Model.objProspect.LstType, "Value", "Value"), "Select", new { @id = "ddlPropectInfoType", @class = "form-control", @onchange = "ValidateSuspectType()" })
            </div>
        </div>

        
        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label><img src="~/Content/Images/quote-2.png" style="width: 20px;" />@Resources.GetLabelName("Salutation")<span class="mandatory">*</span></label>
                @Html.TextBoxFor(m => m.objProspect.Salutation, new
           {
               @class = "form-control",
               @id = "TxtSalutation"@*, @onchange = "AutoPopulateMaritalStatus()"*@})

            </div>
        </div>

    </div>
    <div class="col-md-12 col-sm-12 col-xs-12 col-lg-12 prospectinfo-item">
        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label><img src="~/Content/Images/quote-8.png" style="width: 20px;" />@Resources.GetLabelName("Given Name")<span class="mandatory">*</span></label>
                @(Html.TextBoxFor(a => a.objProspect.Name, new { @id = "txtName", @class = "form-control", @maxlength = "60", @onkeypress = "return AlphabetsWithSpacecommaandslash(event)" }))
            </div>
        </div>
        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label><img src="~/Content/Images/quote-1.png" style="width: 20px;" />@Resources.GetLabelName("Surname")<span class="mandatory">*</span></label>
                @(Html.TextBoxFor(a => a.objProspect.LastName, new { @id = "txtLastName", @class = "form-control", @maxlength = "40", @onkeypress = "return AlphabetsWithSpacecommaandslash(event)" }))
            </div>
        </div>



        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label><img src="~/Content/Images/quote-6.png" style="width: 20px;" />@Resources.GetLabelName("Mobile")<span class="mandatory">*</span></label>
                @Html.TextBoxFor(m => m.objProspect.Mobile, new { @class = "form-control", @id = "txtMobile", @maxlength = "16", @onkeypress = "return isNumberKey(event)" })

            </div>
        </div>

    </div>
    <div class="col-md-12 col-sm-12 col-xs-12 col-lg-12 prospectinfo-item">
        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label><img src="~/Content/Images/quote-7.png" style="width: 20px;" />@Resources.GetLabelName("Home")</label>
                @Html.TextBoxFor(m => m.objProspect.Home, new { @class = "form-control", @id = "txtTelephone", @maxlength = "16", @onkeypress = "return isNumberKey(event)" }) @* @onblur = "ValidatePhoneNumber()"*@

            </div>
        </div>

        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label><img src="~/Content/Images/quote-4.png" style="width: 20px;" />@Resources.GetLabelName("Office")</label>
                @Html.TextBoxFor(m => m.objProspect.Work, new { @class = "form-control", @id = "txtTelephonework", @maxlength = "16", @onkeypress = "return isNumberKey(event)" }) @* @onblur = "ValidatePhoneNumber()"*@

            </div>
        </div>

        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label><img src="~/Content/Images/quote-9.png" style="width: 20px;" />@Resources.GetLabelName("Email ID")<span class="mandatory">*</span></label>
                @Html.TextBoxFor(m => m.objProspect.Email, new { @class = "form-control", @id = "txtEmail", @maxlength = "50", @onblur = "validateEmailID('txtEmail','Please Enter Valid Email Id.')", @style = "text-transform:none", @onkeypress = " return isSpace(event)", @onkeyup = " return isSpace(event)" })
            </div>
        </div>
    </div>
    <div class="col-md-12 col-sm-12 col-xs-12 col-lg-12 prospectinfo-item">
        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("Place")<span class="mandatory">*</span></label>
                @Html.TextBoxFor(m => m.objProspect.Place, new { @class = "form-control", @id = "txtPlace" })


            </div>
        </div>

        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label><img src="~/Content/Images/quote-3.png" style="width: 20px;" />@Resources.GetLabelName("Gender")<span class="mandatory">*</span></label>
                @Html.DropDownListFor(m => m.objProspect.Gender, new SelectList(Model.objProspect.lstGender, "Value", "Text"), "Select", new { @class = "form-control", @id = "ddlGender" })

            </div>
        </div>
        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label><img src="~/Content/Images/Forma 1-16.png" style="width: 20px;" />@Resources.GetLabelName("Marital Status")<span class="mandatory">*</span></label>
                @Html.DropDownListFor(m => m.objProspect.MaritalStatus, new SelectList(Model.objProspect.MaritalStatuslist, "Value", "Text"), "Select", new { @class = "form-control", @id = "ddlMaritalStatus", @onchange = "selectedMaritalStatus()" })

            </div>
            </div>



    </div>
    <div class="col-md-12 col-sm-12 col-xs-12 col-lg-12 prospectinfo-item">
        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group" style="width:100%">
                <label>@Resources.GetLabelName("Date Of Birth")<span class="mandatory">*</span></label>
                @Html.iNubeDatePickerFor(a => a.objProspect.DateofBirth, new { @class = "form-control datepicker", @id = "dtProspectDOB", @onblur = "ageProspectCount('dtDOB')", @maxlength = "10", @onchange = "ageProspectCount()", @onclick = "ageProspectCount()" })

            </div>
        </div>

        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label><img src="~/Content/Images/quote-11.png" style="width: 20px;" />@Resources.GetLabelName("Age")<span class="mandatory">*</span></label>
                @Html.TextBoxFor(m => m.objProspect.AgeNextBdy, new { @class = "form-control", @id = "txtAge", @readonly = "readonly", @maxlength = "2", @onkeypress = "return isNumberKey(event)" })

            </div>
        </div>

        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label><img src="~/Content/Images/quote-5.png" style="width: 20px;" />@Resources.GetLabelName("Occupation")<span class="mandatory">*</span></label>
                @Html.TextBoxFor(m => m.objProspect.Occupation, new { @class = "form-control", @id = "TxtOccupation" })

            </div>
        </div>
    </div>
    <div class="col-md-12 col-sm-12 col-xs-12 col-lg-12 prospectinfo-item">


        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("Average Annual Income")<span class="mandatory">*</span></label>
                @Html.CurrencyTextBoxFor(m => m.objProspect.AvgMonthlyIncome, new { @class = "form-control", @id = "txtAverageMonthlyIncome", @maxlength = "12", @onchange = "f1(id)", @onkeypress = "return isNumberKey(event)", @onkeyup = "return isNumberTabkey(event)" }, Model.objProspect.AvgMonthlyIncome)

            </div>
        </div>



        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("Passport")</label>
                @Html.TextBoxFor(m => m.objProspect.PassPort, new { @class = "form-control", @id = "txtPassport", @maxlength = "16", @onkeypress = "return isAlphaNumberKeybackwithOutSymbolSpace(event)" })
            </div>
        </div>
        @*Added by Udit*@
        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("Do You Smoke?")</label>
                <div>
                    @(Html.RadioButtonFor(m => m.objProspect.IsSmoke, true, new { @class = "med-radio-button", @id = "IsSmokeCovered", value = "1" }))
                    <label>@Resources.GetLabelName("Yes")</label>
                    @(Html.RadioButtonFor(m => m.objProspect.IsSmoke, false, new { @class = "med-radio-button", @id = "IsSmokeCovered", value = "0" }))
                    <label>@Resources.GetLabelName("No")</label>
                </div>
            </div>
        </div>



    </div>

    @*Communication Address*@

    <div class="col-md-12 col-sm-12 col-xs-12 col-lg-12 prospectinfo-item">
        <div class="form-group">
            <p class="col-md-12 h4" style="font-weight:bold;"><img src="~/Content/Images/quote-19.png" style="width: 20px;" />@Resources.GetLabelName("Communication Address"):</p>
            <div class="panel-body col-sm-12">
                @Html.AddressForNewProspectScreen(a => a.objProspect.objAddress)

            </div>
        </div>
    </div>

</div>
<div class="modal fade" id="NicPopUp" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"> </h4>
            </div>
            <div class="modal-body">
                <p>@Resources.GetLabelName("The lead already exist and available details will be updated accordingly")</p>

            </div>
            <div class="modal-footer">
                <button type="button" id="btnYes" class="btn btn-default" data-dismiss="modal">OK</button>
                @*<button type="button" id="btnNo" class="btn btn-default" data-dismiss="modal">No</button>*@
            </div>
        </div>

    </div>
</div>
<script type="text/javascript">
    function ValidateSuspectType() {

        var Type = $("#ddlPropectInfoType").val();
        if (Type == "iNube" || Type == "Mi Syn") {
            writeMultipleMessage("error", "You are not allowed to select campaign leads", "ddlPropectInfoType");
            return false;
        } else {
            writeMultipleMessage("error", "", "ddlPropectInfoType");
            return true;
        }


    }
    function ValidateNICPopup() {
    
        $('#ddlVariant_0').val("");
        $('#ddlVariant_1').val("");
        $('#ddlVariant_2').val("");
        debugger;
        var Plan = $("#txtNic").val();
        if (Plan != '') {
            $.post("../Policy/LoadPreviousInsuranceGrid", $("#fromQuotePage").serialize(), function (data) {
                $("#divPreviousDetailsGrid").html(data);
                $("#divPreviousDetailsGrid").show();
            });
            $.post("../Suspect/GetNicValuesQuote?NIC=" + Plan)
            .done(function (data) {
                debugger;
                if (data.NICAVAIL == true) {
                    debugger;
                    if (data != null) {
                        var res = true;
                    }

                    else {
                        var res = false;

                    }

                }

                else if (data.NICAVAIL == false) {

                    $.post("../Suspect/GetOnFail_ContactValues?NIC=" + Plan)
                     .done(function (data) {
                         debugger;
                         if (data.ClientCode != null) {
                             var res = true;
                         }
                         else {
                             var res = false;

                         }
                         debugger;
                         if (res == true || res == false) {
                             ChangeNIC(res);
                         }
                     });
                }
                debugger;
                if (res == true || res == false) {
                    ChangeNIC(res);
                }
            });
        }

    }
    function ClearBenifitDetails(index) {

        for (i = index; i < 2; i++) {
            $('#DivDynamicInfo_' + i).html("");
            $('#divIllustration_' + i).html("");
            $('#DivPremiumSection_' + i).hide();
            $('#divIllustration_' + i).hide();
            $('#divButtons_' + i).hide();
            $("#divCalMod_" + i).hide();
        }


    }
    function FoundNIC_Loaddata() {
        debugger;
        ClearBenifitDetails('0')
        $('#ddlVariant_0').val("");
        $('#ddlVariant_1').val("");
        $('#ddlVariant_2').val("");
        var Plan = $("#txtNic").val();
        if (Plan != '') {

            $.post("../Suspect/GetNicValuesQuote?NIC=" + Plan)
            .done(function (data) {
                if (data.NICAVAIL == true) {
                    debugger;
                    if (data != null) {
                        FetchDOBGenderfromNIC('txtNic', 'dtProspectDOB', 'ddlGender', 'txtAge');
                        $("#txtEmail").val(data.Email);
                        $('#txtName').val(data.Name);
                        $('#txtLastName').val(data.LastName);
                        $('#txtMobile').val(data.Mobile);
                        $('#TxtSalutation').val(data.Salutation);
                        $('#txtPlace').val(data.Place);
                        //$("#ddlPropectInfoType").val(data.Type);
                        $('#ddlGender').val(data.Gender);
                        $('#txtTelephone').val(data.Home);
                        $('#txtTelephonework').val(data.Work);
                        $("#ddlMaritalStatus").val(data.MaritalStatus);
                        $('#dtProspectDOB').val(data.DateofBirth);
                        $('#txtAge').val(data.Age);
                        $('#TxtOccupation').val(data.Occupation);
                        if (data.AvgMonthlyIncome != "" && data.AvgMonthlyIncome != null) {
                            $('#hdntxtAverageMonthlyIncome').val(data.AvgMonthlyIncome);
                            f2('txtAverageMonthlyIncome');
                        }
                        $("#txtPassport").val(data.PassPort);
                        $('#objProspectobjAddressAddress1').val(data.objAddress.Address1);
                        $('#objProspectobjAddressAddress2').val(data.objAddress.Address2);
                        $('#objProspectobjAddressAddress3').val(data.objAddress.Address3);
                        $('#objProspectobjAddressPincode').val(data.objAddress.Pincode);
                        $('#objProspectobjAddressddlDistrict').val(data.objAddress.District);
                        $('#objProspectobjAddressddlProvince').val(data.objAddress.Province);
                        $("#hdnClientCode").val(data.ClientCode);
                        $("#divProspect").show();

                    }

                    else {
                        $("#divProspect").show();

                    }

                }

                else if (data.NICAVAIL == false) {
                    debugger;
                    $.post("../Suspect/GetOnFail_ContactValues?NIC=" + Plan)
                     .done(function (data) {
                         if (data.ClientCode != null) {
                             FetchDOBGenderfromNIC('txtNic', 'dtProspectDOB', 'ddlGender', 'txtAge');
                             $("#txtEmail").val(data.Email);
                             $('#txtName').val(data.Name);
                             $('#txtLastName').val(data.LastName);
                             $('#txtMobile').val(data.Mobile);
                             $('#TxtSalutation').val(data.Salutation);
                             $('#txtPlace').val(data.Place);
                             $("#ddlPropectInfoType").val(data.Type);
                             $('#ddlGender').val(data.Gender);
                             $('#txtTelephone').val(data.Home);
                             $('#txtTelephonework').val(data.Work);
                             $("#ddlMaritalStatus").val(data.MaritalStatus);
                             $('#dtProspectDOB').val(data.DateofBirth);
                             $('#txtAge').val(data.Age);
                             $('#TxtOccupation').val(data.Occupation);
                             if (data.AvgMonthlyIncome != "" && data.AvgMonthlyIncome != null) {
                                 $('#hdntxtAverageMonthlyIncome').val(data.AvgMonthlyIncome);
                                 f2('txtAverageMonthlyIncome');
                             }
                             $("#txtPassport").val(data.PassPort);
                             $('#objProspectobjAddressAddress1').val(data.objAddress.Address1);
                             $('#objProspectobjAddressAddress2').val(data.objAddress.Address2);
                             $('#objProspectobjAddressAddress3').val(data.objAddress.Address3);
                             $('#objProspectobjAddressPincode').val(data.objAddress.Pincode);
                             $('#objProspectobjAddressddlDistrict').val(data.objAddress.District);
                             $('#objProspectobjAddressddlProvince').val(data.objAddress.Province);
                             $("#hdnClientCode").val(data.ClientCode);
                             $("#divProspect").show();

                         }
                         else {
                             $("#divProspect").show();

                         }

                     });
                }




            });
        }
    }
    $("#TxtOccupation").autocomplete({

        source: function (request, response) {
            $.ajax({
                url: "../Suspect/GetOccupation",
                type: "POST",
                dataType: "json",
                data: { Prefix: request.term },
                success: function (data) {
                    response($.map(data, function (item) {

                        return { label: item.Text, value: item.value };
                    }))
                }
            })
        },
        minLength: 2,
        messages: {
            noResults: "",
            results: function (count) {
                return count + (count > 1 ? ' results' : ' result ') + ' found';
            }
        }
    });
    var value = false;
    $("#hdnAutOccupation").val(value);
    $("#TxtOccupation").on("autocompleteselect", function (event, u) {

        value = true;
        $("#hdnAutOccupation").val(value);

    })


    $("#TxtSalutation").autocomplete({

        source: function (request, response) {
            $.ajax({
                url: "../Suspect/GetSalutation",
                type: "POST",
                dataType: "json",
                data: { Prefix: request.term },
                success: function (data) {

                    response($.map(data, function (item) {
                        return { label: item, value: item };
                    }))
                }
            })
        },
        minLength: 1,
        messages: {
            noResults: "",
            results: function (count) {
                return count + (count > 1 ? ' results' : ' result ') + ' found';
            }
        }
    });
    var value = false;
    $("#hdnAutoCompleteValue").val(value);
    $("#TxtSalutation").on("autocompleteselect", function (event, u) {
        value = true;
        $("#hdnAutoCompleteValue").val(value);

    })

    function LoadQuotePool() {
        window.location.href = '/Policy/Quote';
    }
    $(document).ready(function () {
        $("#ddlPropectInfoType").val('@Model.objProspect.Type');

        if ('@Model.objListQuote[Model.SelectedQuote].IsModifyQuote' == 'False') {
            if ('@Model.objProspect.NIC' != null && '@Model.objProspect.NIC' != "") {
                FetchDOBGenderfromNIC('txtNic', 'dtProspectDOB', 'ddlGender', 'txtAge');

            }
        }


        $('#objProspectobjAddressddlProvince').val('@Model.objProspect.objAddress.State');
        FillDistrictCommaddMember('@Model.objProspect.objAddress.State', '@Model.objProspect.objAddress.District', "objProspectobjAddress");
        FillCityCommaddMember('@Model.objProspect.objAddress.District', '@Model.objProspect.objAddress.City', "objProspectobjAddress");
        @*$('#objAddressddlProvince').val('@Model.objProspect.objAddress.State');*@
        $('#objProspectobjAddressAddress1').val('@Model.objProspect.objAddress.Address1');
        $('#objProspectobjAddressAddress2').val('@Model.objProspect.objAddress.Address2');
        $('#objProspectobjAddressPincode').val('@Model.objProspect.objAddress.Pincode');

        //var dob = $('#dtProspectDOB').val();
        //if (dob != '') {
        //    //
        //    var d = new Date();
        //    var currentYear = d.getFullYear();
        //    var arr = dob.split('/');
        //    var birthYear = arr[2];
        //    var calcAge = currentYear - birthYear;
        //    //$('#txtAge').val(calcAge);
        //    $('#hdnCurrentAge').val(calcAge);
        //}

    });

    function AutoPopulateMaritalStatus() {
        if ($('#ddlSalutation').val() == "1093") {
            $("#ddlMaritalStatus").val(14);
            $('.spouse-details').show();
            $('.prospect-details').show();
            $('#checkedSingle').prop('checked', false);
            $('#checkedMarried').prop('checked', true);
            //$("#ddlMaritalStatus option:selected").text('Married');
        }
        else {
            $("#ddlMaritalStatus").val(15);
            $('.spouse-details').hide();
            $('.prospect-details').show();
            $('#checkedSingle').prop('checked', true);
            $('#checkedMarried').prop('checked', false);
        }
    }

    function FetchDOBGenderfromNIC(e, dob, gender, Age) {
        var NICNo = $('#' + e).val();
        NICNo = NICNo.trim();
        if (NICNo == "") {
            $('#ddlGender').prop("disabled", false);
            $('#dtProspectDOB').prop("disabled", false);
            //writeMultipleMessage("error", "Please Enter SSN Number", e);
            return false;
        }
        if (NICNo != null && NICNo != "") {
            //if (NICNo.toUpperCase() == "SLC") {
            //    writeMultipleMessage("error", "", e);
            //    return true;
            //}
            if (NICNo.length == 12 || NICNo.length == 10) {
                if (NICNo.length == 12) {
                    var nofdays = NICNo.substr(4, 3);
                    var dobyears = NICNo.substr(0, 4);
                }
                else if (NICNo.length == 10) {
                    NICArray = NICNo.split("");
                    if (NICArray[9].toUpperCase() == "X" || NICArray[9].toUpperCase() == "V") {
                        var nofdays = NICNo.substr(2, 3);
                        var dobyears = NICNo.substr(0, 2);
                    }
                    else {
                        writeMultipleMessage("error", "Please Enter Valid SSN Number", e);
                        return false;

                    }
                }
                $.post("../../AgentonBoarding/FetchDateMonth?NIC=" + NICNo)
                    .done(function (data) {
                        if (data != "Error") {

                            if (dob == "dtProspectDOB") {
                                $("#" + dob).prop("disabled", false);
                                $("#" + dob).val(data);
                                $("#" + dob).prop("disabled", true);
                                $('#ProspectDOB').val(data);
                            }
                            else {
                                $("#" + dob).val(data);
                            }
                            if (nofdays <= 366 && nofdays >= 0) {
                                $("#" + gender).val("M");
                                $("#" + gender).prop("disabled", true);
                            }
                            else if (nofdays > 500 && nofdays <= 866) {
                                $("#" + gender).val("F");
                                $("#" + gender).prop("disabled", true);
                            }
                            if (dob != "dtProspectDOB") {
                                ageProspectCount();
                            }
                            else {
                                InterviewrageCount();
                            }
                            // writeMultipleMessage("error", "", e);
                            // return true;
                        }
                        else {
                            writeMultipleMessage("error", "Your SSN Number, Gender or Date of Birth Invalid", e);
                            return false;
                        }
                    });
            }
            else {
                writeMultipleMessage("error", "SSN Number should be 12 or 10 Digits", e);
                return false;
            }
        }
    }

    function InterviewrageCount() {
        writeMultipleMessage("error", "", "txtNic");

        var dob = $("#dtProspectDOB").val();
        if (dob != '' && !ValidateDOB("dtProspectDOB")) {
            writeMultipleMessage("error", "Please Enter Valid NIC", "txtNic");
            return false;
        }
        else {
            writeMultipleMessage("error", "", "dtProspectDOB");
            if (dob != '') {
                //
                var d = new Date();
                var currentYear = d.getFullYear();
                var currentMonth = d.getMonth() + 1;
                var currentDate = d.getDate();
                var arr = dob.split('/');
                var birthYear = arr[2];
                var birthMonth = arr[1];
                var birthdate = arr[0];
                var calYear = currentYear - birthYear;
                var CalMonth = currentMonth - birthMonth;
                var calcAge = 0;
                if (CalMonth < 0 || (CalMonth === 0 && currentDate < birthdate)) {
                    calYear--;
                }
                $("#txtAge").val(calYear + 1);
                $('#hdnCurrentAge').val(calYear);
                var ProspectAge = $('#txtAge').val();
                $('#txtprospectAge').val(ProspectAge);
                $('#txtAgeInfo').val(ProspectAge);
                $('#dtProspectDOBInfo').val(dob);
                if (ProspectAge > 61 || ProspectAge < 19) {
                    writeMultipleMessage("error", "Age at Next Birthday should be between 19 to 61", "txtNic");
                    return false;

                }
                return true;
            }
        }
    }

    function ValidateDOB(datepickerId) {
        //
        var dob = $('#' + datepickerId).val();
        var d = new Date();
        var month = d.getMonth() + 1;
        var day = d.getDate();
        var currentDate = (day < 10 ? '0' : '') + day + '/' + (month < 10 ? '0' : '') + month + '/' + d.getFullYear();
        var arrDOB = dob.split('/');
        var birthDay = arrDOB[0];
        var birthMonth = arrDOB[1];
        var birthYear = arrDOB[2];
        var arrCurrentDate = currentDate.split('/');
        var currentDay = arrCurrentDate[0];
        var currentMonth = arrCurrentDate[1];
        var currentYear = arrCurrentDate[2];
        if (birthYear <= currentYear) {
            if (birthMonth <= currentMonth) {
                if (birthDay <= currentDay) {
                    return true;
                }
                else if (birthDay > currentDay && birthMonth < currentMonth) {
                    return true;
                }
                else if (birthDay > currentDay && birthMonth >= currentMonth && birthYear < currentYear) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (birthMonth > currentMonth && birthYear < currentYear) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }

    function ageProspectCount() {
        ClearBenifitDetails('0');
        $('#ddlVariant_0').val("");
        $('#ddlVariant_1').val("");
        $('#ddlVariant_2').val("");
        var dob = $('#dtProspectDOB').val();
        var controlid = 'dtProspectDOB';
        writeMultipleMessage("error", "", controlid);
        if (dob == "") {
            $('#txtAge').val('');
            writeMultipleMessage("error", "Please Enter Valid Date Of Birth.", controlid);
            return false;
        }
        if (!ValidateDOB(controlid)) {
            $('#txtAge').val('');
            writeMultipleMessage("error", "Please Enter Valid Date Of Birth. It Cannot be Future Date.", controlid);
            return false;
        }
        else {
            if (dob != '') {
                //
                var d = new Date();
                var currentYear = d.getFullYear();
                var currentMonth = d.getMonth() + 1;
                var currentDate = d.getDate();
                var arr = dob.split('/');
                var birthYear = arr[2];
                var birthMonth = arr[1];
                var birthdate = arr[0];
                var calYear = currentYear - birthYear;
                var CalMonth = currentMonth - birthMonth;
                var calcAge = 0;
                if (CalMonth < 0 || (CalMonth === 0 && currentDate < birthdate)) {
                    calYear--;
                }
                $('#txtAge').val(calYear + 1);
                $('#hdnCurrentAge').val(calYear);
                var ProspectAge = $('#txtAge').val();
                $('#txtprospectAge').val(ProspectAge);
                $('#ProspectDOB').val(dob);
            }
            writeMultipleMessage("error", "", controlid);
        }
    }

    function selectedMaritalStatus() {

        var Status = $("#ddlMaritalStatus").val();
        if (Status == 14 || Status == 'M') {
            $("#PIspouseDetails").show();
            $('.spouse-details').show();
            //$('.prospect-details').show();
            $("#DivSpouseMonthlyIncome").show();
            $('#checkedSingle').prop('checked', false);
            $('#checkedMarried').prop('checked', true);
            $('#checkedSingle').prop('disabled', true);
            $('#checkedMarried').prop('disabled', false);
        }
        else if (Status == 15 || Status == 'S') {
            $("#PIspouseDetails").hide();
            $('.spouse-details').hide();
            //$('.prospect-details').show();
            $("#DivSpouseMonthlyIncome").hide();
            $('#checkedSingle').prop('checked', true);
            $('#checkedMarried').prop('checked', false);
            $('#checkedMarried').prop('disabled', true);
            $('#checkedSingle').prop('disabled', false);
        }
        else {
            $('.spouse-details').hide();
            $('.prospect-details').show();
            $('#checkedMarried').prop('disabled', true);
            $('#checkedSingle').prop('disabled', true);
            $('#checkedMarried').prop('checked', false);
            $('#checkedSingle').prop('checked', false);
        }

        if ($("#ddlMaritalStatus option:selected").text() == "Married") {
            $("#PIspouseDetails").css("display", "block");
            var SpouseAge = $('#txtSpouseAgeInfo').val();
            if (SpouseAge == "" || SpouseAge == null || SpouseAge == 0) {
                $('#txtSpouseAgeInfo').addClass("blank-field-hightlight");
            }
            else {
                $('#txtSpouseAgeInfo').removeClass("blank-field-hightlight");
            }
        }
        else {
            $("#PIspouseDetails").css("display", "none");
        }
        if ($("#ddlMaritalStatus option:selected").text() == "Single" || $("#ddlMaritalStatus option:selected").text() == "Company" || $("#ddlMaritalStatus option:selected").text() == "Others") {
            $(".dependents-field").hide();
        }
        else {
            $(".dependents-field").show();
        }
    }


    function FillDistrictCommaddMember(ProvinceCode, distct, ID) {
        var textName = ID;
        if (ProvinceCode != '') {
            $.post("../AgentonBoarding/FetchDistrict?ProvinceCode=" + ProvinceCode)
            .done(function (data) {
                if (data != null) {
                    $('#' + textName + 'ddlDistrict').html(""); // clear before appending new list
                    $('#' + textName + 'ddlDistrict').append($('<option value=\'\'>Select</option>'));
                    $.each(data, function (ID, option) {
                        $('#' + textName + 'ddlDistrict').append($('<option value=\'' + option.DistrictCode + '\'>' + option.District + '</option>'));
                    });
                    $('#' + textName + 'ddlDistrict').val(distct);
                }
            });
        }
    }
    function FillCityCommaddMember(ProvinceCode, distct, ID) {
        var textName = ID;
        if (ProvinceCode != '') {
            $.post("../AgentonBoarding/FetchCity?DistrictCode=" + ProvinceCode)
            .done(function (data) {
                if (data != null) {
                    $('#' + textName + 'ddlCity').html(""); // clear before appending new list
                    $('#' + textName + 'ddlCity').append($('<option value=\'\'>Select</option>'));
                    $.each(data, function (ID, option) {
                        $('#' + textName + 'ddlCity').append($('<option value=\'' + option.CityCode + '\'>' + option.City + '</option>'));
                    });
                    $('#' + textName + 'ddlCity').val(distct);
                }
            });
        }
    }

    function FillDistrictCommAddress(e) {
        var ProvinceCode = $("#" + e.id).val();
        if (ProvinceCode != '') {
            $.post("../AgentonBoarding/FetchDistrict?ProvinceCode=" + ProvinceCode)
            .done(function (data) {
                if (data != null) {
                    if (e.id == "objProspectobjAddressddlProvince") {
                        textId = e.id.substring(0, 21);
                    }
                    else {
                        textId = e.id.substring(0, 21);
                    }
                    $('#' + textId + 'ddlDistrict').html(""); // clear before appending new list
                    $('#' + textId + 'ddlDistrict').append($('<option value=\'\'>Select</option>'));
                    $('#' + textId + 'ddlCity').html(""); // clear before appending new list
                    $('#' + textId + 'ddlCity').append($('<option value=\'\'>Select</option>'));
                    $('#' + textId + 'Pincode').val('');
                    $.each(data, function (ID, option) {
                        $('#' + textId + 'ddlDistrict').append($('<option value=\'' + option.DistrictCode + '\'>' + option.District + '</option>'));
                    });
                }
            });
        }
        else {
            $('#' + textId + 'ddlDistrict').html(""); // clear before appending new list
            $('#' + textId + 'ddlDistrict').append($('<option value=\'\'>Select</option>'));
            $('#' + textId + 'ddlCity').html(""); // clear before appending new list
            $('#' + textId + 'ddlCity').append($('<option value=\'\'>Select</option>'));
            $('#' + textId + 'Pincode').val("");
        }
    }
    function FillCityCommAddress(e) {
        var DistrictCode = $("#" + e.id).val();
        if (DistrictCode != '') {
            $.post("../AgentonBoarding/FetchCity?DistrictCode=" + DistrictCode)
            .done(function (data) {
                if (data != null) {

                    if (e.id == "objProspectobjAddressddlDistrict") {
                        textId = e.id.substring(0, 21);
                    }
                    else {
                        textId = e.id.substring(0, 21);
                    }
                    $('#' + textId + 'ddlCity').html(""); // clear before appending new list
                    $('#' + textId + 'ddlCity').append($('<option value=\'\'>Select</option>'));
                    $('#' + textId + 'Pincode').val('');
                    $.each(data, function (ID, option) {
                        $('#' + textId + 'ddlCity').append($('<option value=\'' + option.CityCode + '\'>' + option.City + '</option>'));
                    });
                }
            });
        }
        else {
            $('#' + textId + 'ddlCity').html(""); // clear before appending new list
            $('#' + textId + 'ddlCity').append($('<option value=\'\'>Select</option>'));
            $('#' + textId + 'Pincode').val("");
        }
    }
    function FillPostalCodeCommAddress(e) {

        var CityCode = $("#" + e).val();
        if (CityCode != '') {
            $.post("../AgentonBoarding/FetchPostalCode?CityCode=" + CityCode)
            .done(function (data) {

                if (data != null) {
                    if (e == "objProspectobjAddressPincode") {

                        textId = e.substring(0, 21);
                    }
                    else {
                        textId = e.substring(0, 21);
                    }
                    $('#' + textId + 'ddlProvince').val(data.Provience);
                    $('#' + textId + 'ddlDistrict').val(data.Distric);
                }
            });
        }
        else {
            $('#' + textId + 'ddlProvince').val("");
            $('#' + textId + 'ddlDistrict').val("");
        }
    }
    function f1(id) {
        var res = $('#' + id).val();
        $('#' + id).val(parseInt(res.replace(/,/g, '')).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ','));
        $('#hdn' + id).val(res.replace(/,/g, ''));
    }
    function f2(id) {
        var res = $('#hdn' + id).val();
        if (res != undefined) {
            $('#' + id).val(parseInt(res.replace(/,/g, '')).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ','));
        }
    }
    function ChangeNIC(res) {
        debugger;
        FetchDOBGenderfromNIC('txtNic', 'dtProspectDOB', 'ddlGender', 'txtAge');
        //var res = ValidateNICPopup();
        if (res) {
            if ("@Model.objProspect.objNeedAnalysis.Stage" == "Lead" || "@Model.objProspect.objNeedAnalysis.Stage" == "Quotation") {
                $("#NicPopUp").modal("show");
            }
            else {
                FoundNIC_Loaddata();
                FetchDOBGenderfromNIC('txtNic', 'dtProspectDOB', 'ddlGender', 'txtAge');
            }
        }
    }
    $("#btnNo").click(function (event) {
        $("#NicPopUp").modal("hide");
    });
    $("#btnYes").click(function (event) {
        $("#NicPopUp").modal("hide");
        FoundNIC_Loaddata();
        FetchDOBGenderfromNIC('txtNic', 'dtProspectDOB', 'ddlGender', 'txtAge');
    });
</script>
