@model AIA.Life.Models.Opportunity.QuoteList
@using AIA.Presentation.Helpers
@using AIAResources;

@{
    ViewBag.Title = "ProductDetails";
    Layout = null;
    bool IsModifyQuote = false;
    int ChildCount = 0;
    if (!string.IsNullOrEmpty(Model.objListQuote[Model.SelectedQuote].NoofChilds))
    {
        ChildCount = Convert.ToInt32(Model.objListQuote[Model.SelectedQuote].NoofChilds);
    }
    if (Model.objListQuote[Model.SelectedQuote].IsModifyQuote == true)
    {
        IsModifyQuote = true;
    }
}
<style>
    .nav-tabs > li > a, .nav-pills > li > a {
        padding: 11px 11px;
    }
</style>
<script src="~/Scripts/Common.js"></script>


<div class="modal fade" id="myProductModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>

            </div>
            <div class="modal-body">
                <p>Currently, we have X% of customers with same plan</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<div id="Quotation_@Model.SelectedQuote">


    @Html.HiddenFor(a => a.objListQuote[Model.SelectedQuote].objSpouseDetials.CurrrentAge, new { @id = "hdnSpouseCurrentage" + Model.SelectedQuote })
    @Html.HiddenFor(a => a.objListQuote[Model.SelectedQuote].objProductDetials.IsAfc, new { @id = "hdnAfc" + Model.SelectedQuote })
    @if (IsModifyQuote)
    {
        @Html.HiddenFor(a => a.objListQuote[Model.SelectedQuote].IsModifyQuote, new { @Value = true })
        @Html.HiddenFor(a => a.objListQuote[Model.SelectedQuote].QuoteNo, new { @id = "hdnQuoteNo" + Model.SelectedQuote, @Value = Model.objListQuote[Model.SelectedQuote].QuoteNo })
        @Html.HiddenFor(a => a.objListQuote[Model.SelectedQuote].QuoteVersion, new { })
        @Html.HiddenFor(a => a.IsForCounterOffer, new { @id = "hdnCounterOffer" + Model.SelectedQuote })
        @Html.HiddenFor(a => a.PrevQuoteNo, new { @id = "hdnPrevQuoteNo" + Model.SelectedQuote })
        @Html.HiddenFor(a => a.objListQuote[Model.SelectedQuote].TotalSumAssured, new { @id = "hdnTotalSumAssured" + Model.SelectedQuote })
    }
    else
    {
        @Html.HiddenFor(a => a.objListQuote[Model.SelectedQuote].TotalSumAssured, new { @id = "hdnTotalSumAssured" + Model.SelectedQuote })
        @Html.HiddenFor(a => a.objListQuote[Model.SelectedQuote].QuoteVersion, new { })
        @Html.HiddenFor(a => a.objListQuote[Model.SelectedQuote].QuoteNo, new { @id = "hdnQuoteNo" + Model.SelectedQuote })
        @Html.HiddenFor(a => a.IsForCounterOffer, new { @id = "hdnCounterOffer" + Model.SelectedQuote, @Value = false })
    }
    <div class="quotation-details">

        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("Product")<span class="mandatory">*</span></label>

                @Html.DropDownListFor(a => a.objListQuote[Model.SelectedQuote].objProductDetials.Plan, new SelectList(Model.objProspect.ListPlan, "Value", "Text"), "Select", new { @class = "form-control", @id = "ddlPlan_" + Model.SelectedQuote, @onchange = "GetVariant('" + Model.SelectedQuote + "',''), ClearBenifitDetails(" + Model.SelectedQuote + ")" })

            </div>
        </div>
        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("Plan")<span class="mandatory">*</span></label>

                @Html.DropDownListFor(a => a.objListQuote[Model.SelectedQuote].objProductDetials.Variant, new SelectList(Model.objProspect.ListVariant, "ID", "Value"), "Select", new { @class = "form-control", @id = "ddlVariant_" + Model.SelectedQuote, @onchange = "GetPlanCode('" + Model.SelectedQuote + "',''), ClearBenifitDetails(" + Model.SelectedQuote + "), GetSAM(" + Model.SelectedQuote + ",'','False','')" })

            </div>
        </div>

        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("Plan Code")</label>

                @(Html.TextBoxFor(a => a.objListQuote[Model.SelectedQuote].objProductDetials.PlanCode, new { id = "txtPlanCode_" + Model.SelectedQuote, @class = "form-control", @readonly = "readonly" }))
            </div>
        </div>
        <div id="divRetairemetAge_@Model.SelectedQuote" style="display:none">

            <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
                <div class="form-group">
                    <label>@Resources.GetLabelName("Retirement Age")<span class="mandatory">*</span></label>
                    @Html.DropDownListFor(m => m.objListQuote[Model.SelectedQuote].objProductDetials.RetirementAge, new SelectList(Model.objProspect.LstRetirementAge, "Text", "Value"), "Select", new { @class = "form-control", @id = "ddlRetirementAge" + Model.SelectedQuote, @onchange = "GetPolicyTermSmartPension(" + Model.SelectedQuote + ","+ Model.objListQuote[Model.SelectedQuote].objProductDetials.RetirementAge + "), ClearBenifitDetails(" + Model.SelectedQuote + ")" })
                </div>
            </div>

        </div>

        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("Policy Term")<span class="mandatory">*</span></label>
                <div id="divPolicyTerm_@Model.SelectedQuote">
                    @Html.DropDownListFor(m => m.objListQuote[Model.SelectedQuote].objProductDetials.PolicyTerm, new SelectList(Model.objListQuote[Model.SelectedQuote].LstPolicyTerm, "Text", "Value"), "Select", new { @class = "form-control", @id = "ddlPolicyTerm_" + Model.SelectedQuote, @onchange = "GetPremiumTerm(" + Model.SelectedQuote + ")" })
                </div>
            </div>
        </div>

        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("Premium Term")<span class="mandatory">*</span></label>
                <div id="divPremiumTerm_@Model.SelectedQuote">
                    @Html.DropDownListFor(m => m.objListQuote[Model.SelectedQuote].objProductDetials.PremiumTerm, new SelectList(Model.objListQuote[Model.SelectedQuote].LstPremiumTerm, "Text", "Value"), "Select", new { @class = "form-control", @id = "ddlPremiumTerm_" + Model.SelectedQuote, @onblur = "ClearBenifitDetails(" + Model.SelectedQuote + ")"@*,@readonly ="readonly"*@ })
                </div>
            </div>
        </div>

        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("Preferred Language")</label>
                @Html.DropDownListFor(m => m.objListQuote[Model.SelectedQuote].objProductDetials.PreferredLangauage, new SelectList(Model.objListQuote[Model.SelectedQuote].lstLanguage, "ID", "Value"), "Select", new { @class = "form-control", @id = "ddlPrefLangauage" + Model.SelectedQuote })
            </div>
        </div>

    </div>

    <div class="col-md-4 col-sm-4 col-lg-4 col-xs-12">
        <div class="form-group">
            <label>@Resources.GetLabelName("Preferred Mode")</label>
            @Html.DropDownListFor(m => m.objListQuote[Model.SelectedQuote].objProductDetials.PreferredMode, new SelectList(Model.objListQuote[Model.SelectedQuote].lstPrefMode, "Value", "Text"), new { @class = "form-control", @id = "ddlPrefMode" + Model.SelectedQuote, @onchange = "ClearModalPremium(" + Model.SelectedQuote + "),ClearBenifitDetails(" + Model.SelectedQuote + ")" })
        </div>
    </div>

    <div id="divPensionPeriod_@Model.SelectedQuote" style="display:none">

        <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("Pension Receiving Period")<span class="mandatory">*</span></label>
                @Html.DropDownListFor(m => m.objListQuote[Model.SelectedQuote].objProductDetials.PensionPeriod, new SelectList(Model.objProspect.LstPensionPeriod, "Text", "Value"), "Select", new { @class = "form-control", @id = "ddlPensionPeriod" + Model.SelectedQuote })
            </div>
        </div>
    </div>
    @*<div id="divEasyPensionPeriod_@Model.SelectedQuote" style="display:none">

            <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
                <div class="form-group">
                    <label>@Resources.GetLabelName("Pension Receiving Period")<span class="mandatory">*</span></label>
                    @Html.DropDownListFor(m => m.objListQuote[Model.SelectedQuote].objProductDetials.PensionPeriod, new SelectList(Model.objProspect.LstPensionPeriod, "Text", "Value"), "Select", new { @class = "form-control", @id = "ddlEasyPensionPeriod" + Model.SelectedQuote })
                </div>
            </div>
        </div>*@

    @*<div class="col-md-4 col-sm-4 col-xs-12 col-lg-4" id="divSelfPay_@Model.SelectedQuote" style="display:none">
            <div class="form-group" style="display:none">
                <label>@Resources.GetLabelName("Self-Pay")</label>
                <div>

                    @(Html.RadioButtonFor(a => a.objListQuote[Model.SelectedQuote].IsSelfPay, true, new { @id = "IsSelfPay" + Model.SelectedQuote, @class = "", @onchange = "ClearBenifitDetails(" + Model.SelectedQuote + ")" }))@Resources.GetLabelName("Yes")
                    @(Html.RadioButtonFor(a => a.objListQuote[Model.SelectedQuote].IsSelfPay, false, new { @id = "IsSelfPay" + Model.SelectedQuote, @class = "", @onchange = "ClearBenifitDetails(" + Model.SelectedQuote + ")" }))@Resources.GetLabelName("No")
                </div>
            </div>
        </div>*@

    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4" id="divChkBoxHealthProtector_@Model.SelectedQuote" style="display:none">
        <div class="form-group">
            <div class="cntr">
                <label class="label-cbx">
                    @Html.CheckBoxFor(a => a.objListQuote[Model.SelectedQuote].objProductDetials.IsFamilyFloater, new
               {
                   @id = "chkIsFamilyFloater_" + Model.SelectedQuote,
                   @class = "invisibleQuatation",
                   @onchange = "ClearBenifitDetails(" + Model.SelectedQuote + "),ChangeCheckBoxIFF(" + Model.SelectedQuote + ")"@*, @style = "width:40px;height:20px;margin-top:5px"*@ })
                    <div class="checkbox">
                        <svg width="20px" height="20px" viewBox="0 0 20 20">
                            <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                            <polyline points="4 11 8 15 16 6"></polyline>
                        </svg>
                    </div>
                    <span>@Resources.GetLabelName("IsFamilyFloater")</span>
                </label>
            </div>
            @*<label>@Resources.GetLabelName("IsFamilyFloater")</label>
                <span>
                    @Html.CheckBoxFor(a => a.objListQuote[Model.SelectedQuote].objProductDetials.IsFamilyFloater, new{@id = "chkIsFamilyFloater_" + Model.SelectedQuote,@onchange = "ClearBenifitDetails(" + Model.SelectedQuote + ")"@*, @style = "width:40px;height:20px;margin-top:5px" })
                </span>*@
        </div>
    </div>
</div>

<div class="col-md-4 col-sm-4 col-xs-12 col-lg-4" id="divChkBoxHealthProtector2_@Model.SelectedQuote" style="display:none">
    <div class="form-group">
        <div class="cntr">
            <label class="label-cbx">
                @Html.CheckBoxFor(a => a.objListQuote[Model.SelectedQuote].objProductDetials.Deductable, new
           {
               @id = "chkDeductable",
               @class = "invisibleQuatation",
               @onchange = "ClearBenifitDetails(" + Model.SelectedQuote + "),ChangeCheckBoxSP(" + Model.SelectedQuote + ")",
               @name = ""@*, @style = "width:40px;height:20px;margin-top:5px"*@ })
                <div class="checkbox">
                    <svg width="20px" height="20px" viewBox="0 0 20 20">
                        <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                        <polyline points="4 11 8 15 16 6"></polyline>
                    </svg>
                </div>
                <span>@Resources.GetLabelName("Self-Pay")</span>
            </label>
        </div>
        @*<label>@Resources.GetLabelName("Self-Pay")</label>
            <span>

                @Html.CheckBoxFor(a => a.objListQuote[Model.SelectedQuote].objProductDetials.Deductable, new{@id = "chkDeductable",@onchange = "ClearBenifitDetails(" + Model.SelectedQuote + ")", @name = ""@*, @style = "width:40px;height:20px;margin-top:5px" })
            </span>*@

    </div>
</div>

<div id="divDrawDownPeriod_@Model.SelectedQuote" style="display:none">

    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label>@Resources.GetLabelName("Draw Down Period")<span class="mandatory">*</span></label>
            @Html.DropDownListFor(m => m.objListQuote[Model.SelectedQuote].objProductDetials.DrawDownPeriod, new SelectList(Model.objProspect.LstDrawDownPeriod, "Text", "Value"), "Select", new { @class = "form-control", @id = "ddlDrawDownPeriod" + Model.SelectedQuote, @onchange = "GetMaturityBenifit(" + Model.SelectedQuote + ")" })
        </div>
    </div>
</div>
<div id="divMaturityBenifit_@Model.SelectedQuote" style="display:none">
    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label for="usr">@Resources.GetLabelName(" How would you like to receive your maturity benefit")<span class="mandatory"></span></label>
            @Html.DropDownListFor(m => m.objListQuote[Model.SelectedQuote].objProductDetials.MaturityBenefits, new SelectList(Model.objProspect.LstMaturityBenefits, "Value", "Text"), "Select", new { @class = "form-control", @id = "ddlLstdMaturityBenefit" + Model.SelectedQuote, @onchange = "ClearBenifitDetails(" + Model.SelectedQuote + ")" })
        </div>
    </div>
</div>


<div id="divMonthlyIncome_@Model.SelectedQuote" style="display:none">

    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label>@Resources.GetLabelName("Monthly Survivor Income") (%)<span class="mandatory">*</span></label>
            @Html.TextBoxFor(m => m.objListQuote[Model.SelectedQuote].objProductDetials.MonthlySurvivorIncome, new { @class = "form-control", @maxLength = 3, @id = "txtMonthlySurvivorIncome" + Model.SelectedQuote, @onkeypress = "return isNumberKey(event)", @onkeyup = "return isNumberTabkey(event)" })
        </div>

    </div>
</div>



<div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
    <div class="form-group">
        <label>@Resources.GetLabelName("Basic Sum Insured") (@Resources.GetLabelName("LKR"))<span class="mandatory">*</span></label>
        <div id="divBasicSum_@Model.SelectedQuote">
            @Html.DropDownListFor(a => a.objListQuote[Model.SelectedQuote].objProductDetials.BasicSumInsured, new SelectList(Model.objListQuote[Model.SelectedQuote].lstSumInsured, "Text", "Value"), "Select", new { @class = "form-control", @id = "ddlBasicSumInsured" + Model.SelectedQuote + "", @onchange = "GetAnnualPremium(" + Model.SelectedQuote + ")" })
        </div>
    </div>
</div>
<div style="display:none" id="divModalPremium_@Model.SelectedQuote">

    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label>@Resources.GetLabelName("Modal Premium")<span class="mandatory">*</span></label>
            @Html.CurrencyTextBoxFor(a => a.objListQuote[Model.SelectedQuote].objProductDetials.ModalPremium, new { @class = "form-control", @id = "txtModalPremium" + Model.SelectedQuote + "", @onchange = "GetAnnualPremium(" + Model.SelectedQuote + ")",@onkeypress= "return isNumberKey(event)",@onkeyup = "return isNumberTabkey(event)" })
        </div>
    </div>
</div>
<div style="display:none" id="divAPCP_@Model.SelectedQuote">

    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label>@Resources.GetLabelName("Annual Compulsory Package")<span class="mandatory">*</span></label>
            @Html.ReadCurrencyTextBoxFor(a => a.objListQuote[Model.SelectedQuote].objProductDetials.APCP, new { @class = "form-control", @id = "txtAPCP" + Model.SelectedQuote + "" }, Model.objListQuote[Model.SelectedQuote].objProductDetials.APCP)
        </div>
    </div>
</div>
<div style="display:none" id="divSAM_@Model.SelectedQuote">

    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label>@Resources.GetLabelName("Sum Assured Level")<span class="mandatory">*</span></label>
            @Html.DropDownListFor(a => a.objListQuote[Model.SelectedQuote].objProductDetials.SAM, new SelectList(Model.objListQuote[Model.SelectedQuote].lstSAM, "Text", "Value"), "Select", new { @class = "form-control", @id = "ddlSAM" + Model.SelectedQuote + "", @onchange = "GetBasicSumInsured(" + Model.SelectedQuote + ")" })
        </div>
    </div>
</div>
<div class="col-md-4 col-sm-4 col-xs-12 col-lg-4" id="divAnnualizePremium_@Model.SelectedQuote">
    <div class="form-group">
        <label>@Resources.GetLabelName("Annualize Premium") (@Resources.GetLabelName("LKR"))<span class="mandatory">*</span></label>
        @Html.ReadCurrencyTextBoxFor(a => a.objListQuote[Model.SelectedQuote].objProductDetials.AnnualPremium, new { @class = "form-control", @id = "txtAnnualizePremium" + Model.SelectedQuote + "", @readonly = "readonly", @onchange = "GetBasicSumInsured(" + Model.SelectedQuote + ")", @onkeypress = "return isNumberKey(event)" }, Model.objListQuote[Model.SelectedQuote].objProductDetials.AnnualPremium)
    </div>
</div>

<div class="clearfix"></div>
<div id="divSpouseCovered_@Model.SelectedQuote" style="display:none">

    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label style="font-size:16px">@Resources.GetLabelName("Spouse to be covered?")</label>
            <div>
                @(Html.RadioButtonFor(a => a.objListQuote[Model.SelectedQuote].IsSpouseCovered, true, new { @id = "IsSpouseCovered" + Model.SelectedQuote, @class = "", @onclick = "ShowSpouseChildDetails('" + "divSpousedetails_" + Model.SelectedQuote + "'),FetchDobOfSpouse(" + Model.SelectedQuote + ")", @onchange = " ClearBenifitDetails(" + Model.SelectedQuote + ")" }))@Resources.GetLabelName("Yes")
                @(Html.RadioButtonFor(a => a.objListQuote[Model.SelectedQuote].IsSpouseCovered, false, new { @id = "IsSpouseCovered" + Model.SelectedQuote, @class = "", @onclick = "HideSpouseChildDetails('" + "divSpousedetails_" + Model.SelectedQuote + "')", @onchange = "ClearBenifitDetails(" + Model.SelectedQuote + ")" }))@Resources.GetLabelName("No")
            </div>
        </div>
    </div>

</div>
<div class="clearfix"></div>
<div id="divSpousedetails_@Model.SelectedQuote" style="display:none;">
    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label>@Resources.GetLabelName("Spouse Given Name")<span class="mandatory">*</span></label>
            @{
                if (Model.IsForCounterOffer)
                {
                    @Html.TextBoxFor(a => a.objListQuote[Model.SelectedQuote].objSpouseDetials.SpouseName, new
               {
                   @id = "txtSpouseName_" + Model.SelectedQuote,
                   @class = "form-control", @*@onchange = "FetchDOBGenderfromNICForSpouse('txtSpouseNic_" + Model.SelectedQuote + "','dtSpouseCoveredDOB_" + Model.SelectedQuote + "','txtSpouseCoveredAge_" + Model.SelectedQuote + "'," + Model.SelectedQuote + ")",*@ @maxlength = 60,
                   @readonly = "readonly", @onkeypress = "return AlphabetsWithSpacecommaandslash(event)", @onkeyup = "return AlphabetsWithSpace(event)"
               })
                }
                else
                {
                    @Html.TextBoxFor(a => a.objListQuote[Model.SelectedQuote].objSpouseDetials.SpouseName, new
               {
                   @id = "txtSpouseName_" + Model.SelectedQuote,
                   @class = "form-control", @*@onchange = "FetchDOBGenderfromNICForSpouse('txtSpouseNic_" + Model.SelectedQuote + "','dtSpouseCoveredDOB_" + Model.SelectedQuote + "','txtSpouseCoveredAge_" + Model.SelectedQuote + "'," + Model.SelectedQuote + ")",*@ @maxlength = 60,
                   @onkeypress = "return AlphabetsWithSpacecommaandslash(event)",@onchange = "ClearBenifitDetails(" + Model.SelectedQuote + ")",
                   @onkeyup = "return AlphabetsWithSpace(event)"
               })
                }
            }
        </div>
    </div>
    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label>@Resources.GetLabelName("Spouse NIC")</label>

            @Html.TextBoxFor(a => a.objListQuote[Model.SelectedQuote].objSpouseDetials.SpouseNIC, new
       {
           @id = "txtSpouseNIC_" + Model.SelectedQuote,
           @class = "form-control", @onchange = "SpouseFetchDOBGenderfromNIC('txtSpouseNIC_" + Model.SelectedQuote+ "','dtSpouseCoveredDOB_"+ Model.SelectedQuote + "','ddlSpouseGender"+Model.SelectedQuote+ "','txtSpouseCoveredAge_"+ Model.SelectedQuote + "'),ClearBenifitDetails(" + Model.SelectedQuote + ")", @maxlength = 12,
           @onkeypress = "return isAlphaNumberKeybackwithOutSymbolSpace(event)",
           @onkeyup = "return isAlphaNumberKeyback(event)"
       })
            


        </div>
    </div>
    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label>@Resources.GetLabelName("Gender")</label>

            @Html.DropDownListFor(m => m.objListQuote[Model.SelectedQuote].objSpouseDetials.Gender, new SelectList(Model.objListQuote[Model.SelectedQuote].lstGender, "Value", "Text", (Model.objListQuote[Model.SelectedQuote].objSpouseDetials.Gender != null ? Model.objListQuote[Model.SelectedQuote].objSpouseDetials.Gender : "")), "Select", new { @class = "form-control", @id = "ddlSpouseGender" + Model.SelectedQuote, @onchange = " ClearBenifitDetails(" + Model.SelectedQuote + ")" })


        </div>
    </div>
    @*<div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
            <div class="form-group">
                <label>@Resources.GetLabelName("NIC")<span class="mandatory">*</span></label>
                @(Html.TextBoxFor(a => a.objListQuote[Model.SelectedQuote].objSpouseDetials.NICNo, new { @id = "txtSpouseNic_" + Model.SelectedQuote, @class = "form-control", @onchange = "FetchDOBGenderfromNICForSpouse('txtSpouseNic_" + Model.SelectedQuote + "','dtSpouseCoveredDOB_" + Model.SelectedQuote + "','txtSpouseCoveredAge_" + Model.SelectedQuote + "'," + Model.SelectedQuote + ")", @maxlength = 12 }))

            </div>
        </div>*@
    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label>@Resources.GetLabelName("Date Of Birth")</label>
            @Html.iNubeDatePickerFor(m => m.objListQuote[Model.SelectedQuote].objSpouseDetials.DOB, new { @class = "form-control datepicker", @id = "dtSpouseCoveredDOB_" + Model.SelectedQuote, @onblur = "ageCountSpouse(" + Model.SelectedQuote + "),ClearBenifitDetails(" + Model.SelectedQuote + ")", @onchange = "ClearBenifitDetails(" + Model.SelectedQuote + "),ageCountSpouse(" + Model.SelectedQuote + ")" })
        </div>
    </div>

    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label>@Resources.GetLabelName("Age at Next Birthday")</label>
            @Html.TextBoxFor(m => m.objListQuote[Model.SelectedQuote].objSpouseDetials.AgeNextBirthday, new { @class = "form-control", @id = "txtSpouseCoveredAge_" + Model.SelectedQuote, @maxlength = "2", @onkeypress = "return isNumberKey(event)", @onchange = " ClearBenifitDetails(" + Model.SelectedQuote + ")" })
        </div>
    </div>



    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label>@Resources.GetLabelName("Occupation")</label>
            @*@Html.DropDownListFor(m => m.objListQuote[Model.SelectedQuote].objSpouseDetials.Occupation, new SelectList(Model.objListQuote[Model.SelectedQuote].lstOccupation, "Value", "Text", Model.objListQuote[Model.SelectedQuote].objSpouseDetials.Occupation != null ? Model.objListQuote[Model.SelectedQuote].objSpouseDetials.Occupation : ""), "Select", new { @class = "form-control ui-autocomplete-input blank-field-hightlight", @id = "ddlSpouseOccupation" + Model.SelectedQuote, @onblur = "validateDropDown('ddlGender','Please Select Gender')", @onchange = " ClearBenifitDetails(" + Model.SelectedQuote + ")" })*@
            @*@Html.TextBoxFor(m => m.objListQuote[Model.SelectedQuote].objSpouseDetials.Occupation, new { @class = "form-control", @id = "ddlSpouseOccupation" })*@
            @Html.TextBoxFor(m => m.objListQuote[Model.SelectedQuote].objSpouseDetials.Occupation, new { @class = "form-control", @id = "ddlSpouseOccupation"+ Model.SelectedQuote, @onchange= "ClearBenifitDetails(" + Model.SelectedQuote + ")" })
        </div>
    </div>




</div>
<div class="clearfix"></div>
<div id="divChildCovered_@Model.SelectedQuote" style="display:none">

    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label style="font-size:16px">@Resources.GetLabelName("Children to be covered?")</label>
            <div>
                @(Html.RadioButtonFor(a => a.objListQuote[Model.SelectedQuote].IsChildCovered, true, new { @id = "IsChildCovered" + Model.SelectedQuote, @class = "", @onclick = "ShowSpouseChildDetails('" + "divChilddetails_" + Model.SelectedQuote + "')", @onchange = " ClearBenifitDetails(" + Model.SelectedQuote + ")" }))@Resources.GetLabelName("Yes")

                @(Html.RadioButtonFor(a => a.objListQuote[Model.SelectedQuote].IsChildCovered, false, new { @id = "IsChildCovered" + Model.SelectedQuote, @class = "", @onclick = "HideChildDetails(" + Model.SelectedQuote + ")", @onchange = " ClearBenifitDetails(" + Model.SelectedQuote + ")" }))@Resources.GetLabelName("No")
            </div>
        </div>
    </div>
    <div class="clearfix"></div>

</div>
<div id="divChilddetails_@Model.SelectedQuote" style="display:none;">

    <div class="col-md-4 col-sm-4 col-xs-12 col-lg-4">
        <div class="form-group">
            <label>@Resources.GetLabelName("Number of Children")</label>

            @Html.TextBoxFor(m => m.objListQuote[Model.SelectedQuote].NoofChilds, new { @class = "form-control", @id = "txtNoofChilds" + Model.SelectedQuote, @onblur = "ValidateNoofChild('" + Model.SelectedQuote + "')", @style = "display:inline-block;width:50%", @onkeypress = "return isNumberKey(event)", @onchange = " ClearBenifitDetails(" + Model.SelectedQuote + ")" })

        </div>
    </div>


</div>
<div class="clearfix"></div>
<div id="divListChilddetails_@Model.SelectedQuote" style="display:none;">
    <div class="form-group">
        @if (IsModifyQuote)
        {
            @Html.Partial("~/Views/prospect/_PartialChildDetails.cshtml", Model)

        }
    </div>
</div>

<div class="col-md-12 col-sm-12  col-lg-12" style="text-align: center;margin-top: 2%;margin-bottom:2%;">
    <div class="form-group">
        <input type="button" class="btn btn-default notdisb" id="btngetriskinfo" value="Get Risk Info" data-toggle="modal" onclick="GetDynamicTabs('@Model.SelectedQuote','@Model.objListQuote[Model.SelectedQuote].IsModifyQuote')" style="padding-left:20px;padding-right:20px;" />
    </div>
</div>
<div class="clearfix"></div>



<div class="col-md-12 col-sm-12 col-xs-12 col-lg-12" id="DivDynamicInfo_@Model.SelectedQuote">
    <div class="form-group">
        @if (IsModifyQuote)
        {
            @Html.Partial("~/Views/Policy/GetDynamicTabs.cshtml", Model)

        }
    </div>

</div>
<div class="col-md-12 col-sm-12 col-xs-12 col-lg-12 form-group" id="divCalMod_@Model.SelectedQuote" style="margin-top:3%;text-align: center;margin-top: 20px;display:none">

    <input type="button" class="btn btn-default notdisb" id="btnCalculate_@Model.SelectedQuote" value="Calculate" style="padding-left:20px;padding-right:20px;" onclick="CalculateQuotePremium('@Model.SelectedQuote')" />
    <input type="button" style="display:none" value="Overview" id="buttonBenefitOverview_@Model.SelectedQuote" class="btn btn-default notdisb" onclick="DisplayBenifitOverview('@Model.SelectedQuote')" />
    <input type="button" class="btn btn-default notdisb" id="btnModify_@Model.SelectedQuote" value="Modify" onclick="ModifyQuote('@Model.SelectedQuote')" style="padding-left:20px;padding-right:20px;" />
</div>


<div class="col-md-12 col-sm-12 col-xs-12 col-lg-12 form-group payablebtn-space" id="DivPremiumSection_@Model.SelectedQuote" style="display:none;">
    <div class="col-md-6 col-sm-4 col-xs-12 col-lg-4 fna-final-count">
        <label class="fna-final-text">
            @Resources.GetLabelName("TOTAL PREMIUM") (LKR)
        </label>
        @(Html.ReadCurrencyTextBoxFor(a => a.objListQuote[Model.SelectedQuote].AnnualPremium, new { id = "txtAnnualPremium" + Model.SelectedQuote, @class = "form-control", @readonly = "readonly", @style = "width:100%;text-align: center;font-size: xx-large;font-weight: bold;height: 10%;background-color: #e1e1e1;border-color: #E1E1E1;" }, Model.objListQuote[Model.SelectedQuote].AnnualPremium))

    </div>
</div>

<div class="col-md-12 col-sm-12 col-xs-12 col-lg-12 form-group" id="divIllustration_@Model.SelectedQuote">

</div>
<div class="col-md-12 col-sm-12 col-xs-12 col-lg-12 form-group" id="ProposerSignature_@Model.SelectedQuote" style="display:none;">
    @if (!string.IsNullOrEmpty(Model.QuoteProposerSignPath))
    {
        <label>
            @Html.ActionLink("Proposer Signature", "DownloadPolicyDocument", "Utility", new { FilePath = Model.QuoteProposerSignPath }, new { target = "_blank" })
        </label>
        @Html.HiddenFor(a => a.QuoteProposerSignPath, new { })
    }
    else if (!Model.IsForCounterOffer) //Propser signature will be be not available for Counter Offer
    {
        <button type="button" class="btn btn-default signaturePad" data-toggle="modal" id="QuotePropserDigitalSign_@Model.SelectedQuote" data-target="#QuatationProposerSignatureModal_@Model.SelectedQuote" style="padding-left:25px;padding-right:25px;">
            @Resources.GetLabelName("Customer Signature")
        </button>
    }

</div>
<div class="clearfix"></div>
<div class="col-md-12 col-sm-12 col-xs-12 col-lg-12 form-group" id="WPSignature_@Model.SelectedQuote" style="display:none;">
    @if (!string.IsNullOrEmpty(Model.QuoteWPProposerSignPath))
            {
        <label>
            @Html.ActionLink("WP Proposer Signature", "DownloadPolicyDocument", "Utility", new { FilePath = Model.QuoteWPProposerSignPath }, new { target = "_blank" })
        </label>
        @Html.HiddenFor(a => a.QuoteWPProposerSignPath, new { })
    }
    else if (!Model.IsForCounterOffer) // WP signature will be be not available for Counter Offer
    {
        <button type="button" class="btn btn-default signaturePad" data-toggle="modal" id="QuoteWPPropserDigitalSign_@Model.SelectedQuote" data-target="#QuatationWPSignatureModal_@Model.SelectedQuote" style="padding-left:25px;padding-right:25px;">
            @Resources.GetLabelName("WP/FPE Signature")
        </button>
    }

</div>
<div class="col-md-12 col-sm-12 col-xs-12 col-lg-12 form-group" style="text-align: center;margin-top: 20px;display:none" id="divButtons_@Model.SelectedQuote">

    <input type="button" class="btn btn-default notdisb" id="btnSave" value="Save" onclick="MonthlyPopup('@Model.SelectedQuote')" style="padding-left:20px;padding-right:20px;" />
    @if (Model.IsForCounterOffer)
    {
        <input type="button" class="btn btn-default notdisb" id="btnCancel" value="Cancel" onclick="CancelCounterOfferQuote()" style="padding-left:20px;padding-right:20px;" />
    }
    else
    {
        <input type="button" class="btn btn-default notdisb" id="btnCancel" value="Cancel" onclick="ClearQuotation()" style="padding-left:20px;padding-right:20px;" />
    }
</div>

<div class="modal fade" id="QuoteModal1" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            @*<div class="modal-header">
                    <h5 class="modal-title">Message</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>*@
            <div class="modal-body" id="MonthlyPopup">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="SaveQuotation('@Model.SelectedQuote')">Ok</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="QuatationProposerSignatureModal_@Model.SelectedQuote" tabindex="-2" role="dialog" aria-labelledby="ProposerModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="QuoteProposerModalLabel">@Resources.GetLabelName("Tap to add Customer Signature")</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="col-md-12 col-sm-12 col-xs-12 col-lg-12">
                    @Html.Partial("~/Views/Shared/QuoteAddSignature.cshtml", Model)
                </div>
            </div>
            <div class="modal-footer">
                @*<button type="button" class="btn btn-secondary" data-dismiss="modal">Save</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>*@
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="QuatationWPSignatureModal_@Model.SelectedQuote" tabindex="-2" role="dialog" aria-labelledby="WPProposerModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="QuoteWPProposerModalLabel">@Resources.GetLabelName("Tap to add WP/FPE Signature")</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="col-md-12 col-sm-12 col-xs-12 col-lg-12">
                    @Html.Partial("~/Views/Shared/QuoteAddWPSignature.cshtml", Model)
                </div>
            </div>
            <div class="modal-footer">
                @*<button type="button" class="btn btn-secondary" data-dismiss="modal">Save</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>*@
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        // Layout.init(); // init layout
        // wireUpEvents();
        $(document).ready(function () {
            debugger;
            if ('@Model.objListQuote[Model.SelectedQuote].objProductDetials.PreferredLangauage'!='' && '@Model.objListQuote[Model.SelectedQuote].objProductDetials.PreferredLangauage'!=null) {
                $('#ddlPrefLangauage' + @Model.SelectedQuote).val('@Model.objListQuote[Model.SelectedQuote].objProductDetials.PreferredLangauage')

            }
            else
            {
                $('#ddlPrefLangauage' + @Model.SelectedQuote).val('1137')
            }
            if ($(window).width() < 370) {
                $(".pad").attr('width', '240');
            }
            else if ($(window).width() < 480) {
                $(".pad").attr('width', '320');
            }
            else if ($(window).width() < 768) {
                $(".pad").attr('width', '420');
            }
            else {
                $(".pad").attr('width', '540');
            }
            $('.signaturePad').click(function () {
                //debugger;
                $(document).load($(window).bind("resize", checkPadsize));
            })
        })
        //$(document).load($(window).bind("resize", checkPosition));

        function checkPadsize() {
            //debugger;
            if ($(window).width() < 370) {
                $(".pad").attr('width', '240');
            }
            else if ($(window).width() < 480) {
                $(".pad").attr('width', '320');
            }
            else if ($(window).width() < 768) {
                $(".pad").attr('width', '420');
            }
            else {
                $(".pad").attr('width', '540');
            }
        }
        $(".invisibleQuatation").removeClass('checkboxactive');
    });
    function GetMaturityBenifit(index) {

        var planCode = $("#txtPlanCode_" + index).val();
        if (planCode == 'SBE' || planCode == 'SBF' || planCode == 'SBA' || planCode == 'SBB' || planCode == 'SBC' || planCode == 'SBD') {
            if ($("#ddlDrawDownPeriod" + index).val() == '0') {
                $("#ddlLstdMaturityBenefit" + index).val('2381');


            }
            else {
                $("#ddlLstdMaturityBenefit" + index).val('2380');
            }
        }
    }
    function ageCountSpouse(e) {
        debugger;
        var dob = $("#dtSpouseCoveredDOB_" + e).val();
        var controlid = 'dtSpouseCoveredDOB_' + e;
        writeMultipleMessage("error", "", controlid);
        if (dob == "") {
            $('#txtSpouseCoveredAge_' + e).val('');
            writeMultipleMessage("error", "Please Enter Valid Date Of Birth.", controlid);
            return false;
        }
        if (!ValidateDOB(controlid)) {
            $('#txtSpouseCoveredAge_' + e).val('');
            writeMultipleMessage("error", "Please Enter Valid Date Of Birth. It Cannot be Future Date.", controlid);
            return false;
        }
        else {
            if (dob != '') {

                var d = new Date();
                var currentYear = d.getFullYear();
                var currentMonth = d.getMonth() + 1;
                var currentDate = d.getDate();
                var arr = dob.split('/');
                var birthYear = arr[2];
                var birthMonth = arr[1];
                var birthdate = arr[0];
                var calYear = currentYear - birthYear;
                var CalMonth = currentMonth - birthMonth;
                var calcAge = 0;
                if (CalMonth < 0 || (CalMonth === 0 && currentDate < birthdate)) {
                    calYear--;
                }
                $('#txtSpouseCoveredAge_' + e).val(calYear + 1);
                $('#hdnSpouseCurrentage' + e).val(calYear);
                $('#txtSpouseCoveredAge_' + e).attr('readonly', true);
                if ($('#txtSpouseCoveredAge_' + e).val() < 19 || $('#txtSpouseCoveredAge_' + e).val() > 61) {
                    writeMultipleMessage("error", "Please enter valid Date Of Birth. Age Next Birthday should be between 19 to 61", controlid);

                }
            }
        }
    }

    function GetPolicyTermSmartPension(index,ReTiredAge) {
        if ($("#txtPlanCode_" + index + "").val() == 'PPH' || $("#txtPlanCode_" + index + "").val() == 'PSP') {
            var policyTerm = parseInt($("#ddlRetirementAge" + index + "").val()) - parseInt($("#txtAge").val());
            if(isNaN(policyTerm))
            {
                policyTerm = parseInt(ReTiredAge) - parseInt($("#txtAge").val());
            }
            if (policyTerm < 15 || policyTerm > 30) {
                $("#TxtPolicyTerm_" + index).val("");
                $("#TxtPremiumTerm_" + index).val("");
                $("#ddlRetirementAge"+ index).val("");
                writeMultipleMessage("error", 'Please select the valid retirement age as your policy term is calculated as ' + policyTerm + '', 'TxtPolicyTerm_' + index)
                return false;
            }
            else {
                writeMultipleMessage("error", "", 'TxtPolicyTerm_' + index);
                $("#TxtPolicyTerm_" + index).val(policyTerm);
                $("#TxtPremiumTerm_" + index).val(policyTerm);
                $("#TxtPolicyTerm_" + index).attr('readonly', 'readonly');
                $("#TxtPremiumTerm_" + index).attr('readonly', 'readonly');
            }

        }

    }

    var _PremiumTerm = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.PremiumTerm';
    var _PolicyTerm = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.PolicyTerm';
    var _PrefferedMode = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.PreferredMode';
    var _PensionPeriod = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.PensionPeriod';
    var _DrawDownPeriod = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.DrawDownPeriod';
    var _MaturityBenefit = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.MaturityBenefits';
    var _IsFamilyFloater = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.IsFamilyFloater';
    var _Deductable = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.Deductable';
    var _IsSelfPay = '@Model.objListQuote[Model.SelectedQuote].IsSelfPay';
    var _MonthlySurvivorIncome = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.MonthlySurvivorIncome';
    var _RetirementAge = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.RetirementAge';
    var _BasicSumInsured = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.BasicSumInsured';
    var _IsSpouseCovered = '@Model.objListQuote[Model.SelectedQuote].IsSpouseCovered';
    var _IsChildCovered = '@Model.objListQuote[Model.SelectedQuote].IsChildCovered';
    var _AnnualizePremium = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.AnnualPremium';
    var _SAM = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.SAM';
    var _Variant = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.Variant';
    var _ModalPremium = '@Model.objListQuote[Model.SelectedQuote].objProductDetials.ModalPremium';

    $(document).ready(function () {
        debugger
        if ($('#chkIsFamilyFloater_@Model.SelectedQuote').is(":checked") == true)
        {
            $('#chkIsFamilyFloater_@Model.SelectedQuote').toggleClass("checkboxactive");
        }
        $('#divAPCP_' + @Model.SelectedQuote).hide();
        var Plan = $("#txtNic").val();
        if (Plan != '') {
            $.post("../Policy/LoadPreviousInsuranceGrid", $("#fromQuotePage").serialize(), function (data) {
                $("#divPreviousDetailsGrid").html(data);
                $("#divPreviousDetailsGrid").show();
            });
        }
        $("#ddlPlan_@Model.SelectedQuote").val('@Model.objListQuote[Model.SelectedQuote].objProductDetials.Plan');
        GetVariant('@Model.SelectedQuote', '@Model.objListQuote[Model.SelectedQuote].objProductDetials.Variant');
        if ('@Model.objListQuote[Model.SelectedQuote].objProductDetials.Variant' != '' || '@Model.objListQuote[Model.SelectedQuote].objProductDetials.Variant' != '0') {
            GetSAM('@Model.SelectedQuote', '@Model.objListQuote[Model.SelectedQuote].objProductDetials.SAM', '@Model.objListQuote[Model.SelectedQuote].IsModifyQuote', '@Model.objListQuote[Model.SelectedQuote].objProductDetials.Variant');
            GetPolicyTermSmartPension('@Model.SelectedQuote','@Model.objListQuote[Model.SelectedQuote].objProductDetials.RetirementAge')
        }
        @*GetPolicyTermSmartPension('@Model.SelectedQuote')*@

        if ('@Model.objListQuote[Model.SelectedQuote].IsSpouseCovered' == 'True') {
            var SpouseDiv = 'divSpousedetails_@Model.SelectedQuote';
            ShowSpouseChildDetails(SpouseDiv);

        }
        if ('@Model.objListQuote[Model.SelectedQuote].IsChildCovered' == 'True') {
            var ChildDiv = 'divChilddetails_@Model.SelectedQuote';
            ShowSpouseChildDetails(ChildDiv);
            $('#divListChilddetails_@Model.SelectedQuote').show();
        }
        if ('@Model.objListQuote[Model.SelectedQuote].IsSpouseCovered' == 'False') {
            var SpouseDiv = 'divSpousedetails_@Model.SelectedQuote';
            HideSpouseChildDetails(SpouseDiv);


        }
        if ('@Model.objListQuote[Model.SelectedQuote].IsChildCovered' == 'False') {
            var ChildDiv = 'divChilddetails_@Model.SelectedQuote';
            HideChildDetails('@Model.SelectedQuote');

        }

        if ('@Model.objListQuote[Model.SelectedQuote].IsModifyQuote' == 'True') {
            if ($("#TxtSalutation").val() != "") {
                $("#hdnAutoCompleteValue").val("True");
            }
            if ($("#TxtOccupation").val != "") {
                $("#hdnAutOccupation").val("True");
            }
            $('#DivPremiumSection_@Model.SelectedQuote').show();
            $('#divCalMod_' + '@Model.SelectedQuote').show();
            if ('@Model.IsForCounterOffer' == 'True') {
                SetControlsForCounteroffer();
            }
        }
        SetMandatoryHighlightBlank('pnlProductDetails', true);
        if ($('#txtSpouseNIC_'+@Model.SelectedQuote).val() == "") {
            $('#txtSpouseCoveredAge_'+@Model.SelectedQuote).prop('readonly',true)
            $('#ddlSpouseGender'+@Model.SelectedQuote).prop('disabled',true)
        }
        else {
            $('#txtSpouseCoveredAge_'+@Model.SelectedQuote).prop('readonly',true)
            $('#ddlSpouseGender'+@Model.SelectedQuote).prop('disabled',true)
            $('#dtSpouseCoveredDOB_'+@Model.SelectedQuote).prop('readonly',true)

        }
    });


    function SetControlsForCounteroffer() {
        $("#DivProspectInformation *").prop('disabled', true);// Disable Proposer Section

        var _Index = '@Model.SelectedQuote';
        $("#ddlPlan_" + _Index).prop('disabled', true);
        $("#ddlVariant_" + _Index).prop('disabled', true);
        if ('@Model.objListQuote[Model.SelectedQuote].IsSpouseCovered' == 'False') {

            $('#IsSpouseCovered' + _Index).attr('disabled', true);
        }
        else {
            $('#ddlSpouseGender' + _Index).attr('disabled', true);
        }

        if ('@Model.objListQuote[Model.SelectedQuote].IsChildCovered' == 'False') {
            $('#IsChildCovered' + _Index).attr('disabled', true);

        }
        else {
            $('#txtNoofChilds' + _Index).attr('readonly', true);


            var _noofChilds = $('#txtNoofChilds' + _Index).val();
            if (_noofChilds != '' || _noofChilds != undefined) {
                var childCount = parseInt(_noofChilds);
                for (var i = 0; i < childCount; i++) {
                    $('#ddlChildGender' + i).attr('disabled', true);
                }
            }

        }

    }

    function EnableControlsInCounterOfferCase() {

        $("#DivProspectInformation *").prop('disabled', false);
        var _Index = '@Model.SelectedQuote';
        $("#ddlPlan_" + _Index).prop('disabled', false);
        $("#ddlVariant_" + _Index).prop('disabled', false);
        if ($('#IsSpouseCovered' + _Index).length > 0) {
            $('#IsSpouseCovered' + _Index).attr('disabled', false);
        }
        // Enable Child Details
        if ($('#IsChildCovered' + _Index).length > 0) {
            $('#IsChildCovered' + _Index).attr('disabled', false);
        }
        var _noofChilds = $('#txtNoofChilds' + _Index).val();
        if (_noofChilds != '' || _noofChilds != undefined) {
            var childCount = parseInt(_noofChilds);
            for (var i = 0; i < childCount; i++) {
                if ($('#ddlChildGender' + i).length > 0) {
                    $('#ddlChildGender' + i).attr('disabled', false);
                }
            }
        }
        if ($('#ddlSpouseGender' + _Index).length > 0) {
            $('#ddlSpouseGender' + _Index).attr('disabled', false);
        }

    }
    function FetchDobOfSpouse(index) {

        if ($("#IsSpouseCovered" + index).val() == "True") {
            var SpouseDob = $("#HdnSpouseDateOfBirth").val()
            var SpouseAge = $("#HdnAge").val()
            var SpouseName = $("#HdnSpouseFullName").val()
            if (SpouseDob != "" && SpouseDob != undefined && SpouseDob != null) {
                var SpouseDOB = SpouseDob.split(' ')[0];

                var dateArr = SpouseDOB.split('-');
                var datespouse = dateArr[0] + '/' + dateArr[1] + '/' + dateArr[2];
                $("#dtSpouseCoveredDOB_" + index).val(datespouse);
            }


            $("#txtSpouseCoveredAge_" + index).val(SpouseAge);
            $("#txtSpouseName_" + index).val(SpouseName);
            var Gender = $("#ddlGender").val();
            if (Gender == 'M') {
                $("#ddlSpouseGender" + index).val('F');
                $("#ddlSpouseGender" + index).attr('disable', true);

            }
            if (Gender == 'F') {
                $("#ddlSpouseGender" + index).val('M');
                $("#ddlSpouseGender" + index).attr('disable', true);
            }


        }
    }

    function ShowSpouseChildDetails(divid) {
        $('#' + divid).show();
    }
    function HideSpouseChildDetails(divid) {
        $('#' + divid).hide();


    }
    function HideChildDetails(index) {

        $('#divChilddetails_' + index).hide();
        $('#divListChilddetails_' + index).hide();
        $('#txtNoofChilds' + index).val("");
        $('#dtChildDOB' + index).val("");
        $('#ddlChildGender' + index).val("");



    }
    function GetPremiumTerm(index) {
        var ddlPolicyTerm = $("#ddlPolicyTerm_" + index).val();
        $("#TxtPremiumTerm_" + index).val(ddlPolicyTerm);
        $("#TxtPremiumTerm_" + index).show();
        $('#TxtPremiumTerm_' + index).attr("readonly", true);
        $("#divPremiumTermDdl_" + index + "").hide();


    }
    function GetPremiumTermHealthProtector(index) {
        ClearBenifitDetails(index);
        if ($("#txtPlanCode_" + index + "").val() == 'HPA' || $("#txtPlanCode_" + index + "").val() == 'EPB') {
            var PolicyTerm = $("#txtPolicyTerm_" + index).val();
            $("#TxtPremiumTerm_" + index).val(PolicyTerm);
            $('#TxtPremiumTerm_' + index).attr("readonly", true);

        }

    }
    function ValidateNoofChild(index) {
        ClearBenifitDetails(index);
        var j = '@Model.SelectedQuote';
        var txt = $('#txtNoofChilds' + index).val();
        if (txt != undefined && txt != '') {
            var val = parseInt(txt);
            if (val > 5) {
                writeMultipleMessage("error", 'Maximum 5 no of children is allowed ', 'txtNoofChilds' + index + '')
                return false;
            }
            else {
                $("#hdnSelectedQuote").val(index);
                if ('@Model.IsForCounterOffer' == 'True') {
                    EnableControlsInCounterOfferCase();
                }
                $.post('/Policy/GetChildDetails', $("#fromQuotePage").serialize(), function (data) {


                    $("#divListChilddetails_" + index).html(data);
                    $("#divListChilddetails_" + index).show();
                    for (i = 0; i <= val; i++) {
                        var ChildName = $("#HdnChildName" + i).val();
                        var ChildDOB = $("#HdnChildDOB" + i).val();
                        var ChildAge = $("#HdnChildAge" + i).val();
                        var ChildRelationship = $("#HdnRelationship" + i).val();
                        $("#txtChildName" + index + i).val(ChildName);
                        if (ChildDOB != undefined && ChildDOB != "" & ChildDOB != null) {
                            var ChildrenDOB = ChildDOB.split(' ')[0];
                            var dateArr = ChildrenDOB.split('-');
                            var datechild = dateArr[0] + '/' + dateArr[1] + '/' + dateArr[2];
                            $("#dtChildDOB" + index + i).val(datechild);
                        }
                        $("#txtChildAge" + index + i).val(ChildAge);
                        if (ChildRelationship == "Son") {
                            $("#ddlChildGender" + index + i).val("M")
                        }
                        if (ChildRelationship == "Daughter") {

                            $("#ddlChildGender" + index + i).val("F")
                        }

                    }


                    if ('@Model.IsForCounterOffer' == 'True') {
                        SetControlsForCounteroffer();
                    }

                })
            }
        }
    }

    function ValidateProspectInfoDirect(index) {
        writeMultipleMessage("error", "", "txtNic");
        writeMultipleMessage("error", "", "txtName");
        writeMultipleMessage("error", "", 'txtLastName');
        writeMultipleMessage("error", "", "objProspectobjAddressAddress1");
        writeMultipleMessage("error", "", "objProspectobjAddressAddress2");
        writeMultipleMessage("error", "", "objProspectobjAddressAddress3");
        var Type = $("#ddlPropectInfoType option:selected").text();
        var Salutation = $("#TxtSalutation").val();
        var NIC = $("#txtNic").val();
        var PassPort = $("#txtPassport").val();
        var Gender = $("#ddlGender").val();
        var AnnualIncome = $("#hdntxtAverageMonthlyIncome").val();
        var Occupation = $("#TxtOccupation").val();
        var Place = $("#txtPlace").val();
        var Name = $("#txtName").val();
        var LastName = $("#txtLastName").val();
        var Mobile = $("#txtMobile").val();
        var DOB = $("#dtProspectDOB").val();
        var DatePickerID = $("#dtDOB").attr('id');
        var Age = $('#txtAge').val();
        var Address1 = $("#objProspectobjAddressAddress1").val();
        var Address2 = $("#objProspectobjAddressAddress2").val();
        var Address1 = $('#objProspectobjAddressAddress1').val();
        var MaritalStatus = $("#ddlMaritalStatus").val();

        if ($("#ddlPropectInfoType option:selected").text() == 'Select' || $("#ddlPropectInfoType option:selected").text() == '') {
            writeMultipleMessage("error", 'Please select Type', 'ddlPropectInfoType')
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'ddlPropectInfoType');
        }
        if ($("#TxtSalutation").val() == "") {
            writeMultipleMessage("error", 'Please Enter Salutation', 'TxtSalutation')
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'TxtSalutation');
        }
        if (Name == "") {
            writeMultipleMessage("error", "Please Enter Given Name.", 'txtFirstName');
            return false;
        }
        var res = ValidName(Name)
        if (res == false) {
            writeMultipleMessage("error", "“Please Enter Valid Name – Following formats are not allowed – <br>-First Character cannot be ‘Space’ or ‘special character’<br>-There cannot be 3 consecutive letters in name<br>-Two consecutive space are not allowed<br>-Accept only ‘alphabet’, ‘space’  and ‘apostrophe (‘)’‘’", "txtName");
            return false;
        }

        else {
            writeMultipleMessage("error", "", 'txtName');
        }
        if (LastName == "") {
            writeMultipleMessage("error", "Please Enter SurName.", 'txtLastName');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'txtLastName');
        }
        var res = ValidName(LastName)
        if (res == false) {
            writeMultipleMessage("error", "“Please Enter Valid SurName – Following formats are not allowed –<br>-First Character cannot be ‘Space’ or ‘special character’<br>-There cannot be 3 consecutive letters in name<br>-Two consecutive space are not allowed-Accept only ‘alphabet’, ‘space’ and ‘apostrophe (‘)’‘’", "txtName");
            return false;
        }

        if ($("#ddlGender option:selected").text() == 'Select' || $("#ddlGender option:selected").text() == '') {
            writeMultipleMessage("error", 'Please select Gender', 'ddlGender')
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'ddlGender');
        }
        if (DOB == "") {
            writeMultipleMessage("error", "Please Enter DOB.", 'dtProspectDOB');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'dtProspectDOB');
        }
        if (Age == "") {
            writeMultipleMessage("error", "Please Enter Age at Next BirthDay.", 'txtAge');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'txtAge');
        }
        if (Age < 19 || Age > 61) {
            writeMultipleMessage("error", "Please Enter Age at Next BirthDay Should be between 19 to 61", 'txtAge');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'txtAge');
        }
        if (Mobile == "") {
            writeMultipleMessage("error", "Please Enter Mobile No.", "txtMobile");
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'txtMobile');
        }

        if (Mobile != "" && Mobile.length < 10) {
            writeMultipleMessage("error", "Please Enter atleast 10 Digits Mobile Number.", "txtMobile");
            return false;
        }
        else {
            writeMultipleMessage("error", "", "txtMobile");

        }
        if ($("#hdnAutoCompleteValue").val() == "false") {
            writeMultipleMessage("error", "Please Enter correct Salutation.", "TxtSalutation");
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'TxtSalutation');
        }
        if (Gender == "M") {
            if (MaritalStatus == "W") {
                writeMultipleMessage("error", "Please Select Proper Marital Status According to your gender.", "ddlMaritalStatus");
                return false;
            }
            else {
                writeMultipleMessage("error", "", "ddlMaritalStatus");

            }
        }
        if (Gender == "F") {
            if (MaritalStatus == "R") {
                writeMultipleMessage("error", "Please Select Proper Marital Status According to your gender.", "ddlMaritalStatus");
                return false;
            }
            else {
                writeMultipleMessage("error", "", "ddlMaritalStatus");

            }
        }
        if (AnnualIncome == "") {
            writeMultipleMessage("error", "Please Enter Average Annual Income", "txtAverageMonthlyIncome");
            return false;
        }
        var Address1 = $("#objProspectobjAddressAddress1").val();
        var res = ValidateAddress(Address1)
        if (res == false) {
            writeMultipleMessage("error", "“Please Enter Valid Address1 – Following formats are not allowed – <br>-First Character cannot be ‘Space’ or ‘special character’ <br>-There cannot be 3 consecutive letters in name <br>-Two or consecutive space are not allowed <br>-After space, ‘comma’ or ‘-’ are not allowed <br>-After apostrophe (‘), space is not allowed", "objProspectobjAddressAddress1");
            return false;
        }
        else {
            writeMultipleMessage("error", "", "objProspectobjAddressAddress1");
        }
        var Address2 = $('#objProspectobjAddressAddress2').val();
        var res = ValidateAddress(Address2)
        if (res == false) {
            writeMultipleMessage("error", "“Please Enter Valid Address2 – Following formats are not allowed – <br>-First Character cannot be ‘Space’ or ‘special character’ <br>-There cannot be 3 consecutive letters in name <br>-Two or consecutive space are not allowed <br>-After space, ‘comma’ or ‘-’ are not allowed <br>-Apostrophe (‘),is not allowed after space", "objProspectobjAddressAddress2");
            return false;
        }
        else {
            writeMultipleMessage("error", "", "objProspectobjAddressAddress2");
        }
        var Address3 = $('#objProspectobjAddressAddress3').val();
        var res = ValidateAddress(Address3)
        if (res == false) {
            writeMultipleMessage("error", "“Please Enter Valid Address3 – Following formats are not allowed – <br>-First Character cannot be ‘Space’ or ‘special character’ <br>-There cannot be 3 consecutive letters in name <br>-Two or consecutive space are not allowed <br>-After space, ‘comma’ or ‘-’ are not allowed <br>-Apostrophe (‘),is not allowed after space", "objProspectobjAddressAddress3");
            return false;
        }
        else {
            writeMultipleMessage("error", "", "objProspectobjAddressAddress3");
        }
        var pin = $("#objProspectobjAddressPincode").val();

        return true;

    }
    function ValidateProspectInfoIndirect() {
        writeMultipleMessage("error", "", "txtNic");
        writeMultipleMessage("error", "", "txtName");
        writeMultipleMessage("error", "", 'txtLastName');
        writeMultipleMessage("error", "", "objProspectobjAddressAddress1");
        writeMultipleMessage("error", "", "objProspectobjAddressAddress2");
        writeMultipleMessage("error", "", "objProspectobjAddressAddress3");
        var Type = $("#ddlPropectInfoType option:selected").text();
        var Salutation = $("#TxtSalutation").val();
        var NIC = $("#txtNic").val();
        var PassPort = $("#txtPassport").val();
        var Gender = $("#ddlGender").val();
        var AnnualIncome = $("#txtAverageMonthlyIncome").val();
        var Occupation = $("#TxtOccupation").val();
        var Place = $("#txtPlace").val();
        var Name = $("#txtName").val();
        var LastName = $("#txtLastName").val();
        var Mobile = $("#txtMobile").val();
        var DOB = $("#dtProspectDOB").val();
        var DatePickerID = $("#dtDOB").attr('id');
        var Age = $('#txtAge').val();
        var AverageAnnualIncome = parseInt($('#txtAverageMonthlyIncome').val());
        var MaritalStatus = $('#ddlMaritalStatus').val();
        var Address1 = $("#objProspectobjAddressAddress1").val();
        var Address2 = $("#objProspectobjAddressAddress2").val();
        var Address1 = $('#objProspectobjAddressAddress1').val();
        var MaritalStatus = $("#ddlMaritalStatus").val();

        if ($("#ddlPropectInfoType option:selected").text() == 'Select' || $("#ddlPropectInfoType option:selected").text() == '') {
            writeMultipleMessage("error", 'Please select Type', 'ddlPropectInfoType')
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'ddlPropectInfoType');
        }
        if ($("#TxtSalutation").val() == "") {
            writeMultipleMessage("error", 'Please Enter Salutation', 'TxtSalutation')
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'TxtSalutation');
        }
        if (Name == "") {
            writeMultipleMessage("error", "Please Enter Given Name.", 'txtFirstName');
            return false;
        }
        var res = ValidName(Name)
        if (res == false) {
            writeMultipleMessage("error", "“Please Enter Valid Name – Following formats are not allowed – <br>-First Character cannot be ‘Space’ or ‘special character’<br>-There cannot be 3 consecutive letters in name<br>-Two consecutive space are not allowed<br>-Accept only ‘alphabet’, ‘space’  and ‘apostrophe (‘)’‘’", "txtName");
            return false;
        }

        else {
            writeMultipleMessage("error", "", 'txtName');
        }
        if (LastName == "") {
            writeMultipleMessage("error", "Please Enter SurName.", 'txtLastName');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'txtLastName');
        }
        var res = ValidName(LastName)
        if (res == false) {
            writeMultipleMessage("error", "“Please Enter Valid SurName – Following formats are not allowed –<br>-First Character cannot be ‘Space’ or ‘special character’<br>-There cannot be 3 consecutive letters in name<br>-Two consecutive space are not allowed-Accept only ‘alphabet’, ‘space’ and ‘apostrophe (‘)’‘’", "txtName");
            return false;
        }
        if (NIC == "") {
            writeMultipleMessage("error", "Please Enter NIC.", 'txtNic');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'txtNic');
        }
        if (Mobile == "") {
            writeMultipleMessage("error", "Please Enter Mobile No.", 'txtMobile');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'txtMobile');
        }
        if (Mobile != "" && Mobile.length < 10) {
            writeMultipleMessage("error", "Please Enter atleast 10 Digits Mobile Number.", "txtMobile");
            return false;
        }
        else {
            writeMultipleMessage("error", "", "txtMobile");

        }
        if (Place == "") {
            writeMultipleMessage("error", "Please Enter Place.", 'txtPlace');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'txtPlace');
        }
        if ($("#ddlGender option:selected").text() == 'Select' || $("#ddlGender option:selected").text() == '') {
            writeMultipleMessage("error", 'Please select Gender', 'ddlGender')
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'ddlGender');
        }
        if (MaritalStatus == 'Select' || MaritalStatus == '') {
            writeMultipleMessage("error", 'Please select MaritalStatus', 'ddlMaritalStatus')
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'ddlMaritalStatus');
        }
        if (DOB == "") {
            writeMultipleMessage("error", "Please Enter DOB.", 'dtProspectDOB');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'dtProspectDOB');
        }
        if (Age == "") {
            writeMultipleMessage("error", "Please Enter Age at Next BirthDay.", 'txtAge');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'txtAge');
        }
        if (Age < 19 || Age > 61) {
            writeMultipleMessage("error", "Please Enter Age at Next BirthDay Should be between 19 to 61", 'txtAge');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'txtAge');
        }
        if (Occupation == "") {
            writeMultipleMessage("error", "Please Enter Occupation.", 'TxtOccupation');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'TxtOccupation');
        }
        if (AverageAnnualIncome == 0) {
            writeMultipleMessage("error", "Please Enter Average Annual Income.", 'txtAverageMonthlyIncome');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'txtAverageMonthlyIncome');
        }


        if (Gender == "M") {
            if (MaritalStatus == "W") {
                writeMultipleMessage("error", "Please Select Proper Marital Status According to your gender.", "ddlMaritalStatus");
                return false;
            }
            else {
                writeMultipleMessage("error", "", "ddlMaritalStatus");

            }
        }
        if (Gender == "F") {
            if (MaritalStatus == "R") {
                writeMultipleMessage("error", "Please Select Proper Marital Status According to your gender.", "ddlMaritalStatus");
                return false;
            }
            else {
                writeMultipleMessage("error", "", "ddlMaritalStatus");

            }
        }

        var Address1 = $("#objProspectobjAddressAddress1").val();
        if (Address1 == "") {
            writeMultipleMessage("error", "Please Enter Address1.", 'objProspectobjAddressAddress1');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'objProspectobjAddressAddress1');
        }
        var res = ValidateAddress(Address1)
        if (res == false) {
            writeMultipleMessage("error", "“Please Enter Valid Address1 – Following formats are not allowed – <br>-First Character cannot be ‘Space’ or ‘special character’ <br>-There cannot be 3 consecutive letters in name <br>-Two or consecutive space are not allowed <br>-After space, ‘comma’ or ‘-’ are not allowed <br>-After apostrophe (‘), space is not allowed", "objProspectobjAddressAddress1");
            return false;
        }
        else {
            writeMultipleMessage("error", "", "objProspectobjAddressAddress1");
        }
        var Address2 = $('#objProspectobjAddressAddress2').val();
        if (Address2 == "") {
            writeMultipleMessage("error", "Please Enter Address2.", 'objProspectobjAddressAddress2');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'objProspectobjAddressAddress2');
        }
        var res = ValidateAddress(Address2)
        if (res == false) {
            writeMultipleMessage("error", "“Please Enter Valid Address2 – Following formats are not allowed – <br>-First Character cannot be ‘Space’ or ‘special character’ <br>-There cannot be 3 consecutive letters in name <br>-Two or consecutive space are not allowed <br>-After space, ‘comma’ or ‘-’ are not allowed <br>-Apostrophe (‘),is not allowed after space", "objProspectobjAddressAddress2");
            return false;
        }
        else {
            writeMultipleMessage("error", "", "objProspectobjAddressAddress2");
        }
        var Address3 = $('#objProspectobjAddressAddress3').val();
        var res = ValidateAddress(Address3)
        if (res == false) {
            writeMultipleMessage("error", "“Please Enter Valid Address3 – Following formats are not allowed – <br>-First Character cannot be ‘Space’ or ‘special character’ <br>-There cannot be 3 consecutive letters in name <br>-Two or consecutive space are not allowed <br>-After space, ‘comma’ or ‘-’ are not allowed <br>-Apostrophe (‘),is not allowed after space", "objProspectobjAddressAddress3");
            return false;
        }
        else {
            writeMultipleMessage("error", "", "objProspectobjAddressAddress3");
        }
        var pin = $("#objProspectobjAddressPincode").val();
        if (pin == "") {
            writeMultipleMessage("error", "Please Enter Pin.", 'objProspectobjAddressPincode');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'objProspectobjAddressPincode');
        }
        return true;

    }
    function ValidateNICPassport() {
        var NIC = $("#txtNic").val();
        var PassPort = $("#txtPassport").val();
        if (PassPort == "" && NIC == "") {
            writeMultipleMessage("error", "Please Enter PassPort/NIC", 'txtPassport');
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'txtPassport');
            return true;
        }
    }

    function ValidateProductDetails(index) {
        debugger
        if ($("#ddlPlan_" + index).val() == "Select" || $("#ddlPlan_" + index).val() == '' || $("#ddlPlan_" + index).val() == undefined) {
            writeMultipleMessage("error", 'Please select The Product', 'ddlPlan_' + index + '')
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'ddlPlan_' + index);

        }
        if ($("#ddlVariant_" + index).val() == "Select" || $("#ddlVariant_" + index).val() == '' || $("#ddlVariant_" + index).val() == undefined) {
            writeMultipleMessage("error", 'Please select The Plan', 'ddlVariant_' + index + '')
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'ddlVariant_' + index);

        }
        var planCode = $("#txtPlanCode_" + index + "").val();
        if (planCode == 'PPG' || planCode == 'SBE' || planCode == 'SBF'
        || planCode == 'SBA' || planCode == 'SBB' ||
            planCode == 'SBC' || planCode == 'SBD' ||
            planCode == 'SBG' || planCode == 'SBH') {

            if ($("#ddlPolicyTerm_" + index + " option:selected").text() == 'Select' || $("#ddlPolicyTerm_" + index + "  option:selected").text() == '') {
                writeMultipleMessage("error", 'Please Select The Policy Term', 'ddlPolicyTerm_' + index)
                return false;
            }
            else {
                writeMultipleMessage("error", "", 'ddlPolicyTerm_' + index + '');

            }
        }
        else {
            if ($("#txtPolicyTerm_" + index + "").val() == "") {
                writeMultipleMessage("error", 'Please Enter The Policy Term', 'txtPolicyTerm_' + index + '')
                return false;
            }
            else {
                writeMultipleMessage("error", "", 'txtPolicyTerm_' + index + '');

            }
        }


        if (planCode == 'HPA') {
            var age = $("#txtAge").val();
            var fixedAge = 71;
            var maxPremiumLimit = parseInt(fixedAge) - parseInt($("#txtAge").val());
            if ($("#txtPolicyTerm_" + index + "").val() < 10) {
                writeMultipleMessage("error", 'Policy Term Should be minimum 10', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#txtPolicyTerm_" + index + "").val() > 52) {
                writeMultipleMessage("error", 'Policy Term Should be Maximum 52', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#txtPolicyTerm_" + index + "").val() > maxPremiumLimit) {
                writeMultipleMessage("error", 'Policy Term Should be in maximum cover ceasing age of 71', 'txtPolicyTerm_' + index + '')
                return false;
            }
        }
        else {
            writeMultipleMessage("error", "", 'txtPolicyTerm_' + index + '');

        }
        if (planCode == 'EPB') {
            var age = $("#txtAge").val();
            var fixedAge = 76;
            var maxPremiumLimit = parseInt(fixedAge) - parseInt($("#txtAge").val());
            if ($("#txtPolicyTerm_" + index + "").val() < 10) {
                writeMultipleMessage("error", 'Policy Term Should be minimum 10', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#txtPolicyTerm_" + index + "").val() > 56) {
                writeMultipleMessage("error", 'Policy Term Should be Maximum 56', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#txtPolicyTerm_" + index + "").val() > maxPremiumLimit) {
                writeMultipleMessage("error", 'Policy Term Should be in  in maximum cover ceasing age of 76', 'txtPolicyTerm_' + index + '')
                return false;
            }
        }
        else {
            writeMultipleMessage("error", "", 'txtPolicyTerm_' + index + '');

        }
        if (planCode == 'PPG') {
            var age = $("#txtAge").val();
            var fixedAge = 76;
            var maxPremiumLimit = parseInt(fixedAge) - parseInt($("#txtAge").val());
            if ($("#ddlPolicyTerm_" + index + "").val() < 15) {
                writeMultipleMessage("error", 'Policy Term Should be minimum 15', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > 30) {
                writeMultipleMessage("error", 'Policy Term Should be Maximum 30', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > maxPremiumLimit) {
                writeMultipleMessage("error", 'Policy Term Should be in maximum cover ceasing age of 76', 'txtPolicyTerm_' + index + '')
                return false;
            }
        }
        else {
            writeMultipleMessage("error", "", 'ddlPolicyTerm_' + index + '');

        }
        if (planCode == 'PPH') {
            var age = $("#txtAge").val();
            var fixedAge = 76;
            var maxPremiumLimit = parseInt(fixedAge) - parseInt($("#txtAge").val());
            if ($("#ddlPolicyTerm_" + index + "").val() < 15) {
                writeMultipleMessage("error", 'Policy Term Should be minimum 15', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > 30) {
                writeMultipleMessage("error", 'Policy Term Should be Maximum 30', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > maxPremiumLimit) {
                writeMultipleMessage("error", 'Policy Term Should be in maximum cover ceasing age of 76', 'txtPolicyTerm_' + index + '')
                return false;
            }
        }
        else {
            writeMultipleMessage("error", "", 'ddlPolicyTerm_' + index + '');

        }
        if (planCode == 'SBE') {
            var age = $("#txtAge").val();
            var fixedAge = 76;
            var maxPremiumLimit = parseInt(fixedAge) - parseInt($("#txtAge").val());
            if ($("#ddlPolicyTerm_" + index + "").val() < 10) {
                writeMultipleMessage("error", 'Policy Term Should be minimum 10', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > 20) {
                writeMultipleMessage("error", 'Policy Term Should be Maximum 20', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > maxPremiumLimit) {
                writeMultipleMessage("error", 'Policy Term Should be in maximum cover ceasing age of 76', 'txtPolicyTerm_' + index + '')
                return false;
            }
        }
        else {
            writeMultipleMessage("error", "", 'ddlPolicyTerm_' + index + '');

        }
        if (planCode == 'SBF') {
            var age = $("#txtAge").val();
            var fixedAge = 76;
            var maxPremiumLimit = parseInt(fixedAge) - parseInt($("#txtAge").val());
            if ($("#ddlPolicyTerm_" + index + "").val() < 10) {
                writeMultipleMessage("error", 'Policy Term Should be minimum 10', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > 20) {
                writeMultipleMessage("error", 'Policy Term Should be Maximum 52', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > maxPremiumLimit) {
                writeMultipleMessage("error", 'Policy Term Should be in maximum cover ceasing age of 76', 'txtPolicyTerm_' + index + '')
                return false;
            }
        }
        else {
            writeMultipleMessage("error", "", 'ddlPolicyTerm_' + index + '');

        }
        if (planCode == 'SBA') {
            var age = $("#txtAge").val();
            var fixedAge = 76;
            var maxPremiumLimit = parseInt(fixedAge) - parseInt($("#txtAge").val());
            if ($("#ddlPolicyTerm_" + index + "").val() < 10) {
                writeMultipleMessage("error", 'Policy Term Should be minimum 10', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > 20) {
                writeMultipleMessage("error", 'Policy Term Should be Maximum 20', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > maxPremiumLimit) {
                writeMultipleMessage("error", 'Policy Term Should be in maximum cover ceasing age of 76', 'txtPolicyTerm_' + index + '')
                return false;
            }
        }
        else {
            writeMultipleMessage("error", "", 'ddlPolicyTerm_' + index + '');

        }
        if (planCode == 'SBB') {
            var age = $("#txtAge").val();
            var fixedAge = 76;
            var maxPremiumLimit = parseInt(fixedAge) - parseInt($("#txtAge").val());
            if ($("#ddlPolicyTerm_" + index + "").val() < 10) {
                writeMultipleMessage("error", 'Policy Term Should be minimum 10', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > 20) {
                writeMultipleMessage("error", 'Policy Term Should be Maximum 20', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > maxPremiumLimit) {
                writeMultipleMessage("error", 'Policy Term Should be in maximum cover ceasing age of 76', 'txtPolicyTerm_' + index + '')
                return false;
            }
        }
        else {
            writeMultipleMessage("error", "", 'ddlPolicyTerm_' + index + '');

        }
        if (planCode == 'SBC') {
            var age = $("#txtAge").val();
            var fixedAge = 76;
            var maxPremiumLimit = parseInt(fixedAge) - parseInt($("#txtAge").val());
            if ($("#ddlPolicyTerm_" + index + "").val() < 10) {
                writeMultipleMessage("error", 'Policy Term Should be minimum 10', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > 20) {
                writeMultipleMessage("error", 'Policy Term Should be Maximum 20', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > maxPremiumLimit) {
                writeMultipleMessage("error", 'Policy Term Should be in maximum cover ceasing age of 76', 'txtPolicyTerm_' + index + '')
                return false;
            }
        }
        else {
            writeMultipleMessage("error", "", 'ddlPolicyTerm_' + index + '');
        }


        if (planCode == 'SBD') {
            var age = $("#txtAge").val();
            var fixedAge = 76;
            var maxPremiumLimit = parseInt(fixedAge) - parseInt($("#txtAge").val());
            if ($("#ddlPolicyTerm_" + index + "").val() < 10) {
                writeMultipleMessage("error", 'Policy Term Should be minimum 10', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > 20) {
                writeMultipleMessage("error", 'Policy Term Should be Maximum 20', 'txtPolicyTerm_' + index + '')
                return false;
            }
            if ($("#ddlPolicyTerm_" + index + "").val() > maxPremiumLimit) {
                writeMultipleMessage("error", 'Policy Term Should be in maximum cover ceasing age of 76', 'txtPolicyTerm_' + index + '')
                return false;
            }
        }
        else {
            writeMultipleMessage("error", "", 'ddlPolicyTerm_' + index + '');

        }

        if (planCode == "PPH") {
            if ($("#ddlPensionPeriod" + index + "").val() == "") {
                writeMultipleMessage("error", 'Please Select The Pension Period', 'ddlPensionPeriod' + index + '')
                return false;
            }
            else {
                writeMultipleMessage("error", "", 'ddlPensionPeriod' + index + '');

            }
        }
        if (planCode == "PPG") {
            if ($("#ddlPensionPeriod" + index + "").val() == "") {
                writeMultipleMessage("error", 'Please Select The Pension Period', 'ddlPensionPeriod' + index + '')
                return false;
            }
            else {
                writeMultipleMessage("error", "", 'ddlEasyPensionPeriod' + index + '');

            }
        }
        if (planCode == "PPH") {
            if ($("#ddlRetirementAge" + index + "").val() == "") {
                writeMultipleMessage("error", 'Please Select The Retirement Age', 'ddlRetirementAge' + index + '')
                return false;
            }
            else {
                writeMultipleMessage("error", "", 'ddlRetirementAge' + index + '');

            }
        }

        if ($("#ddlBasicSumInsured" + index + "").val() == "") {
            writeMultipleMessage("error", 'Please Select The Basic SumInsured', 'ddlBasicSumInsured' + index + '')
            return false;
        }
        else {
            writeMultipleMessage("error", "", 'ddlBasicSumInsured' + index + '');

        }
        if (planCode == 'PPH') {

            if ($("#txtMonthlySurvivorIncome" + index + "").val() > 100) {
                writeMultipleMessage("error", 'Please Enter Valid Monthly Survivor Income', 'txtMonthlySurvivorIncome' + index + '')
                return false;
            }
            else {
                writeMultipleMessage("error", "", 'txtMonthlySurvivorIncome' + index);

            }
        }
        if (planCode != 'HPA') {
            if ($("#txtAnnualizePremium" + index + "").val() == "") {
                writeMultipleMessage("error", 'Please Enter The Annualize Premium', 'txtAnnualizePremium' + index + '')
                return false;
            }
            else {
                var AnnualizePremium = parseInt($("#hdntxtAnnualizePremium" + index + "").val());
                var PreferredMode = $("#ddlPrefMode" + index).val();
                if (planCode == 'PPH') {

                    if (AnnualizePremium < 42000) {
                        writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 42000', 'txtAnnualizePremium' + index + '')
                        return false;
                    }

                }
                if (planCode == 'SBE') {

                    if (AnnualizePremium < 250000) {
                        writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 250000', 'txtAnnualizePremium' + index + '')
                        return false;
                    }

                }
                if (planCode == 'SBF') {

                    if (AnnualizePremium < 150000) {
                        writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 150000', 'txtAnnualizePremium' + index + '')
                        return false;
                    }

                }
                if (planCode == 'SBA') {

                    if (AnnualizePremium < 50000) {
                        writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 50000', 'txtAnnualizePremium' + index + '')
                        return false;
                    }
                    if (AnnualizePremium > 250000) {
                        writeMultipleMessage("error", 'Please Enter The  Annualize Premium less than 250000', 'txtAnnualizePremium' + index + '')
                        return false;
                    }

                }
                if (planCode == 'SBB') {
                    if (PreferredMode == "01") {
                        if (AnnualizePremium < 50000) {
                            writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 50000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                        if (AnnualizePremium > 150000) {
                            writeMultipleMessage("error", 'Please Enter The  Annualize Premium less than 150000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                    }
                    if (PreferredMode == "02") {
                        if (AnnualizePremium < 60000) {
                            writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 60000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                        if (AnnualizePremium > 150000) {
                            writeMultipleMessage("error", 'Please Enter The  Annualize Premium less than 150000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                    }
                    if (PreferredMode == "04") {
                        if (AnnualizePremium < 70000) {
                            writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 70000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                        if (AnnualizePremium > 150000) {
                            writeMultipleMessage("error", 'Please Enter The  Annualize Premium less than 150000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                    }
                    if (PreferredMode == "12") {
                        if (AnnualizePremium < 70000) {
                            writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 70000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                        if (AnnualizePremium > 150000) {
                            writeMultipleMessage("error", 'Please Enter The  Annualize Premium less than 150000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                    }

                }
                if (planCode == 'SBC') {

                    if (AnnualizePremium < 50000) {
                        writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 50000', 'txtAnnualizePremium' + index + '')
                        return false;
                    }
                    if (AnnualizePremium > 250000) {
                        writeMultipleMessage("error", 'Please Enter The  Annualize Premium less than 250000', 'txtAnnualizePremium' + index + '')
                        return false;
                    }

                }
                if (planCode == 'SBD') {

                    if (PreferredMode == "01") {
                        if (AnnualizePremium < 50000) {
                            writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 50000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                        if (AnnualizePremium > 150000) {
                            writeMultipleMessage("error", 'Please Enter The  Annualize Premium less than 150000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                    }
                    if (PreferredMode == "02") {
                        if (AnnualizePremium < 60000) {
                            writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 60000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                        if (AnnualizePremium > 150000) {
                            writeMultipleMessage("error", 'Please Enter The  Annualize Premium less than 150000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                    }
                    if (PreferredMode == "04") {
                        if (AnnualizePremium < 70000) {
                            writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 70000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                        if (AnnualizePremium > 150000) {
                            writeMultipleMessage("error", 'Please Enter The  Annualize Premium less than 150000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                    }
                    if (PreferredMode == "12") {
                        if (AnnualizePremium < 70000) {
                            writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 70000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                        if (AnnualizePremium > 150000) {
                            writeMultipleMessage("error", 'Please Enter The  Annualize Premium less than 150000', 'txtAnnualizePremium' + index + '')
                            return false;
                        }
                    }

                }
                if (planCode == 'SBG') {

                    if (AnnualizePremium < 250000) {
                        writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 250000', 'txtAnnualizePremium' + index + '')
                        return false;
                    }


                }
                if (planCode == 'SBH') {

                    if (AnnualizePremium < 250000) {
                        writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 250000', 'txtAnnualizePremium' + index + '')
                        return false;
                    }


                }
                if (planCode == 'EPB') {

                    if (AnnualizePremium < 42000) {
                        writeMultipleMessage("error", 'Please Enter The minimum Annualize Premium as 42000', 'txtAnnualizePremium' + index + '')
                        return false;
                    }


                }
                writeMultipleMessage("error", "", 'txtAnnualizePremium' + index + '');
            }
        }
        if (planCode == 'SBE' || planCode == 'SBF' || planCode == 'PPH' || planCode == 'SBG' || planCode == 'SBH' || planCode == 'SBA' || planCode == 'SBB' || planCode == 'SBC' || planCode == 'SBD' || planCode == 'EPB') {

            if ($("#ddlSAM" + index).val() == "") {
                writeMultipleMessage("error", 'Please Select The Sum Assured Level', 'ddlSAM' + index + '')
                return false;
            }
            else {

                writeMultipleMessage("error", "", 'ddlSAM' + index + '');
            }
        }
        debugger;
        if (planCode == 'PPH')
        {
            if ($("#txtMonthlySurvivorIncome" + index).val() == "") {
                writeMultipleMessage("error", 'Please Enter Monthly Survivor Income ', 'txtMonthlySurvivorIncome' + index + '')
                return false;
            }
            else {

                writeMultipleMessage("error", "", 'txtMonthlySurvivorIncome' + index + '');
            }
        }
        var SpouseAge = parseInt($("#txtSpouseCoveredAge_" + index).val());
        var SpouseGender = $("#ddlSpouseGender" + index).val()
        var SpouseName = $("#txtSpouseName_" + index).val()
        var SpouseOccupation = $("#ddlSpouseOccupation"+ index).val();
        var MainGender = $('#ddlGender').val();
        if ($("#IsSpouseCovered" + index).is(":checked") == true) {
            if (SpouseAge < 19 || SpouseAge > 61) {
                writeMultipleMessage('error', ' Age at Next BirthDay of Spouse Should be between 19 to 61', 'txtSpouseCoveredAge_' + index);
                return false;
            }

            else {
                writeMultipleMessage("error", "", 'txtSpouseCoveredAge_' + index);

            }
            if (SpouseGender == "") {
                writeMultipleMessage('error', ' Please Select Spouse Gender', 'ddlSpouseGender' + index);
                return false;
            }
            else if(SpouseGender == MainGender)
            {
                writeMultipleMessage('error', 'Please check MainLife and Spouse gender are same', 'ddlSpouseGender' + index);
                return false;
            }

            else {
                writeMultipleMessage("error", "", 'ddlSpouseGender' + index);

            }
            if (SpouseName == "") {
                writeMultipleMessage('error', ' Please Select Spouse Name', 'txtSpouseName_' + index);
                return false;
            }

            else {
                writeMultipleMessage("error", "", 'txtSpouseName_' + index);

            }
            if (SpouseOccupation == "" || SpouseOccupation == undefined) {
                writeMultipleMessage('error', ' Please Select Spouse Occupation', 'ddlSpouseOccupation' + index);
                return false;
            }

            else {
                writeMultipleMessage("error", "", 'ddlSpouseOccupation' + index);

            }

        }
        var NoofChild = parseInt($("#txtNoofChilds" + index).val());

        for (i = 0; i < NoofChild ; i++) {
            var ChildAge = parseInt($("#txtChildAge" + index + i).val());
            var ChildGender = $("#ddlChildGender" + index + i).val();
            var ChildDob = $("#dtChildDOB" + index + i).val();
            var dt = new Date();
            var currentYear = dt.getFullYear();
            var currentMonth = dt.getMonth() + 1;
            var currentDate = dt.getDate();
            var arr = ChildDob.split('/');
            var birthYear = arr[2];
            var birthMonth = arr[1];
            var birthdate = arr[0];
            var calYear = currentYear - birthYear;
            var CalMonth = currentMonth - birthMonth;
            var calcAge = 0;
            if (CalMonth < 0 || (CalMonth === 0 && currentDate < birthdate)) {
                calYear--;
            }
            var oneDay = 24*60*60*1000;
            var firstDate = new Date(parseInt(birthYear),parseInt(birthMonth)-1,parseInt(birthdate));
            var diffDays = Math.round(Math.abs((dt.getTime() - firstDate.getTime())/(oneDay)));

            if ($("#IsChildCovered" + index).is(":checked") == true) {
                if ($("#txtNoofChilds" + index).val() != "") {

                    if (ChildAge > 19) {
                        writeMultipleMessage('error', ' Child Age at Next BirthDay Should be less than or equal to to 19', 'txtChildAge' + index + i);
                        return false;
                    }

                    else {
                        writeMultipleMessage("error", "", 'txtChildAge' + index + i);

                    }
                    if (ChildAge == "0"||ChildAge == ""||isNaN(ChildAge)) {
                        writeMultipleMessage('error', ' Child Age should be more than 90 days ', 'txtChildAge' + index + i);
                        return false;
                    }
                    else
                    {
                        writeMultipleMessage("error", "", 'txtChildAge' + index + i);
                    }
                    if (diffDays < 90) {
                        writeMultipleMessage('error', ' Child Age should be more than 90 days ', 'txtChildAge' + index + i);
                        return false;
                    }
                    else
                    {
                        writeMultipleMessage("error", "", 'txtChildAge' + index + i);
                    }
                    if (ChildGender == "") {
                        writeMultipleMessage('error', ' Please Select Child Gender', 'ddlChildGender' + index + i);
                        return false;
                    }

                    else {
                        writeMultipleMessage("error", "", 'ddlChildGender' + index + i);

                    }

                }
            }
        }
        if (planCode == "HPA" || planCode == "PPH") {
            if ($("#IsSpouseCovered" + index).is(":checked") == false && $("#IsChildCovered" + index).is(":checked") == false) {
                if ($("#chkIsFamilyFloater_" + index).is(":checked") == true) {
                    writeMultipleMessage('error', 'Family floater is not allowed when there are no dependents', 'chkIsFamilyFloater_' + index);
                    return false;
                }
                else {
                    writeMultipleMessage("error", "", 'chkIsFamilyFloater_' + index);

                }
            }
        }
        if (planCode == "SBC" || planCode == "SBD") {
            if ($("#txtAge").val() > 56) {

                writeMultipleMessage('error', 'Please change the plan to 4pay or 6 pay as your age is greater than 56', 'ddlVariant_' + index);
                return false;
            }
            else {
                writeMultipleMessage("error", "", 'ddlVariant_' + index);

            }
        }
        if (planCode == 'SBE' || planCode == 'SBF' || planCode == 'SBA' || planCode == 'SBB' || planCode == 'SBC' || planCode == 'SBD') {
            if ($("#ddlDrawDownPeriod" + index).val() == '0' && $("#ddlLstdMaturityBenefit" + index).val()=='2380') {
                writeMultipleMessage('error', 'Drawdown Period cannot be zero for maturity type Payment', 'ddlLstdMaturityBenefit' + index);
                return false;

            }


            if ($("#ddlDrawDownPeriod" + index).val() != '0' && $("#ddlLstdMaturityBenefit" + index).val() == '2381') {
                writeMultipleMessage('error', 'Drawdown Period should be zero for maturity type Lump Sum', 'ddlLstdMaturityBenefit' + index);
                return false;

            }
            else {
                writeMultipleMessage("error", "", 'ddlLstdMaturityBenefit' + index);

            }
        }


        return true;
    }
    function ClearBenifitDetails(index) {
        $('#DivDynamicInfo_' + index).html("");
        $('#divIllustration_' + index).html("");
        $('#DivPremiumSection_' + index).hide();
        $('#divIllustration_' + index).hide();
        $('#divButtons_' + index).hide();
        $("#divCalMod_" + index).hide();

    }

    function ChangeCheckBoxIFF(index) {

        $('#chkIsFamilyFloater_'+index).toggleClass("checkboxactive");
    }
    function ChangeCheckBoxSP(index) {
        $('#chkDeductable').toggleClass("checkboxactive");
    }
    function ValidateGenderSalutation() {
        debugger;
        var Salutation = $('#TxtSalutation').val();
        var Gender = $('#ddlGender').val();
        if (Salutation == "Al Haj" || Salutation == "Ayur Dr Mr" || Salutation == "Father" || Salutation == "Master" || Salutation == "Mr" || Salutation == "Rector" || Salutation == "Reverent" || Salutation == "Reverent Father" || Salutation == "Sir") {
            if (Gender == "F") {
                writeMultipleMessage("error", "Salutation does not match with the Gender", 'ddlGender');
                return false;

            }
        }
        else if (Salutation == "Ayur Dr Mrs" || Salutation == "Ayur Dr Ms" || Salutation == "Dame" || Salutation == "Dr Mrs" || Salutation == "Dr Ms" || Salutation == "Lady" || Salutation == "Madam" || Salutation == "Miss" || Salutation == "Mrs" || Salutation == "Ms" || Salutation == "Reverent Sister") {
            if (Gender == "M") {
                writeMultipleMessage("error", "Salutation does not match with the Gender", 'ddlGender');
                return false;

            }
        }
        return true;
    }
    function GetDynamicTabs(index, isModifiedQuote) {
        debugger
        $('#ddlSpouseGender'+index).prop('disabled',false);
        $('#dtSpouseCoveredDOB_'+index).prop('disabled',false);
        if (!ValidateGenderSalutation()) {
            $('#ddlSpouseGender'+index).prop('disabled',true);
            if ($('#txtSpouseNIC_'+index).val() != "") {
                $('#dtSpouseCoveredDOB_'+index).prop('disabled',true);
            }
            return false;
        }
        clearAllErrors();
        //writeMultipleMessage("error", "", "pnlProductDetails");
        //writeMultipleMessage("error", "", "pnlProposerDetails");
        if ('@Model.objListQuote[Model.SelectedQuote].QuotationType' == 'Direct') {
            if (!ValidateProspectInfoDirect()) {
                $('#ddlSpouseGender'+index).prop('disabled',true);
                if ($('#txtSpouseNIC_'+index).val() != "") {
                    $('#dtSpouseCoveredDOB_'+index).prop('disabled',true);
                }
                return false;
            }
        }
        else {
            if (!ValidateProspectInfoIndirect()) {
                $('#ddlSpouseGender'+index).prop('disabled',true);
                if ($('#txtSpouseNIC_'+index).val() != "") {
                    $('#dtSpouseCoveredDOB_'+index).prop('disabled',true);
                }
                return false;
            }
        }

        //if (!ValidateNICPassport()) {
        //    return false;
        //}
        if (!ValidateProductDetails(index)) {
            $('#ddlSpouseGender'+index).prop('disabled',true);
            if ($('#txtSpouseNIC_'+index).val() != "") {
                $('#dtSpouseCoveredDOB_'+index).prop('disabled',true);
            }
            return false;
        }

        else {
            $("#hdnSelectedQuote").val(index);
            $('#DivDynamicInfo_' + index).html("");
            $('#ddlGender').prop("disabled", false);
            if ('@Model.IsForCounterOffer' == 'True') {
                EnableControlsInCounterOfferCase();
            }
            $.post("/Policy/GetDynamicTabs", $("#fromQuotePage").serialize(), function (data) {
                debugger;
                $('#ddlSpouseGender'+index).prop('disabled',true);
                $('#dtSpouseCoveredDOB_'+index).prop('disabled',true);
                $('#DivDynamicInfo_' + index).html(data);
                $("#divCalMod_" + index).show();
                $("#divCabtnCalculate_" + index).show();
                if ('@Model.IsForCounterOffer' == 'True') {
                    SetControlsForCounteroffer();
                }
                //$("#btnModify_" + index).hide();
            });
            //$('#myProductModal').show();
            writeMultipleMessage("error", "", "DivDynamicInfo_" + index);
        }


    }
    function ClearModalPremium(index)
    {
        var Plancode=$("#txtPlanCode_"+index).val();
        if(Plancode=="PPH"||Plancode=="EPB")
        {
            $("#txtBasicSumInsured_"+index).val('');
            $("#txtAnnualizePremium"+index).val('');
            $("#txtModalPremium"+index).val('');

        }
    }
    function GetAnnualPremium(index) {
        debugger
        f1("txtModalPremium" + index);
        var ModalPremium= parseInt($("#hdntxtModalPremium" + index + "").val());
        var PreferredMode = parseInt($("#ddlPrefMode" + index + "").val());
        var Plan = $("#ddlPlan_" + index + " option:selected").text();
        var SAM = $("#ddlSAM" + index + " option:selected").text();

        ClearBenifitDetails(index);
        var txtAnnualizePremium ="";
        if(Plan=='Easy Pensions' || Plan=='Live Life Product')
        {
            var ddlBasicSumInsured = $("#ddlBasicSumInsured" + index + " option:selected").val()
            txtAnnualizePremium = ddlBasicSumInsured / 20;
            $("#hdntxtAnnualizePremium" + index + "").val(txtAnnualizePremium);
            f2("txtAnnualizePremium" + index);

        }
        if(Plan=='Smart Pensions'|| Plan=='Education Plan')
        {
            if(ModalPremium!=0 && ModalPremium!=""&&!isNaN(ModalPremium))
            {
                $("#txtBasicSumInsured_"+index).val('');
                $("txtModalPremium" + index).val('');
                $("#txtAnnualizePremium"+index).val('');
                txtAnnualizePremium=ModalPremium*PreferredMode;
                $("#hdntxtAnnualizePremium" + index + "").val(txtAnnualizePremium);
                f2("txtAnnualizePremium" + index);
                $("#hdntxtModalPremium" + index + "").val(ModalPremium);
                f2("txtModalPremium" + index);
                $("#hdntxtBasicSumInsured_" + index).val(txtAnnualizePremium);
                f2("txtBasicSumInsured_" + index);
            }
            else{
                $("#hdntxtModalPremium" + index + "").val(0);
                f2("txtModalPremium" + index);

            }

        }


    }
    function GetBasicSumInsured(index) {
        debugger
        f1("txtAnnualizePremium" + index);
        ClearBenifitDetails(index);
        var planCode = $("#txtPlanCode_" + index + "").val();
        if (planCode == "EPB" || planCode == "SBE" || planCode == 'SBF' ||
                       planCode == "PPH" || planCode == 'SBA' || planCode == 'SBB' ||
                         planCode == 'SBC' || planCode == 'SBD'
                         ) {
            var AnnualizePremium = $("#hdntxtAnnualizePremium" + index).val()
            $("#hdntxtBasicSumInsured_" + index).val(AnnualizePremium);
            f2("txtBasicSumInsured_" + index);
        }

    }


    function CalculateQuotePremium(index) {
        debugger;

        writeMultipleMessage("error", "", "DivDynamicInfo_" + index);
        //Commented for removing the Border lines for Craete Quation sections
        //writeMultipleMessage("error", "", "pnlProductDetails");
        //writeMultipleMessage("error", "", "pnlProposerDetails");
        clearAllErrors()
        if ('@Model.IsForCounterOffer' == 'True') {
            EnableControlsInCounterOfferCase();
        }
        if (!ValidateProductDetails(index)) {
            return false;
        }
        $('#ddlSpouseGender'+index).prop('disabled',false);
        $('#dtSpouseCoveredDOB_'+index).prop('disabled',false);
        $.post("/Policy/CalculateQuotePremium", $("#fromQuotePage").serialize())
            .done(function (data) {
                if (data.Message == "Success") {
                    debugger;
                    $('#ddlSpouseGender'+index).prop('disabled',true);
                    $('#dtSpouseCoveredDOB_'+index).prop('disabled',true);
                    var planCode = $("#txtPlanCode_" + index + "").val();
                    if (planCode == "HPA") {
                        $('#divAPCP_' + index).show();
                        $('#hdntxtAPCP' + index).val(data.objProductDetials.APCP);
                        f2('txtAPCP' + index);
                    }
                    else {
                        $('#divAPCP_' + index).hide();
                    }
                    $('#fromQuotePage' + index).find('input:not(.notdisb), textarea, select').attr('disabled', false);
                    $('#HdnContactID' + index).attr('disabled', false);
                    $("#hdntxtAnnualPremium" + index).val(data.AnnualPremium);
                    f2("txtAnnualPremium" + index);
                    $("#txtHalfYearlyPremium" + index).val(data.HalfYearlyPremium);
                    $("#txtQuaterlyPremium" + index).val(data.QuaterlyPremium);
                    $("#txtMonthlyPremium" + index).val(data.MonthlyPremium);
                    $("#txtBasicPremium" + index).val(data.BasicPremium);
                    $("#txtCess" + index).val(data.Cess);
                    $("#txtVat" + index).val(data.VAT);
                    $("#hdnPolicyFee" + index).val(data.PolicyFee);
                    $('#divButtons_' + index).show();
                    $('#DivDynamicInfo_' + index).html("");
                    $('#DivDynamicInfo_' + index).html(data.STRBenefitHtml);
                    $('#BenifitOvervieModelbody_' + index).html(data.STRHtml);
                    $('#divIllustration_' + index).html(data.STRPremiumHtml);
                    $("#DivPremiumSection_" + index).show();
                    $('#divIllustration_' + index).show();
                    $('#divCalMod_' + index).show();
                    $('#ProposerSignature_' + index).show();
                    $('#WPSignature_' + index).show();

                    // $('#buttonPremiumOverview_'+index).show();
                    $('#btnCalculate_' + index).hide();

                    $('#fromQuotePage' + index).find('input:not(.notdisb), textarea, select').attr('disabled', true);
                    writeMultipleMessage("error", "", "DivDynamicInfo_" + index);
                    EnablePopUp(index);
                }
                else {
                    $('#ddlSpouseGender'+index).prop('disabled',true);
                    $('#dtSpouseCoveredDOB_'+index).prop('disabled',true);
                    $("#DivPremiumSection_" + index).hide();
                    $('#divIllustration_' + index).hide();
                    writeMultipleMessage("error", data.Error.ErrorMessage, "DivDynamicInfo_" + index);
                }

                if ('@Model.IsForCounterOffer' == 'True') {
                    SetControlsForCounteroffer();
                }

            }).
       fail(function () {

       });
        var AnnualPremium = $("#hdntxtAnnualPremium" + index).val();
        var PreferredMode = $("#ddlPrefMode" + index).val();


    }

    function SaveQuotation(index) {

        $('#fromQuotePage' + index).find('input:not(.notdisb), textarea, select').attr('disabled', false);
        $('#HdnContactID' + index).attr('disabled', false);
        $("#hdnSelectedQuote").val(index);
        $('#ddlGender').prop("disabled", false);
        $('#dtProspectDOB').prop("disabled", false);
        var res = false;
        $("#ddlSpouseGender" + index).prop("disable", false);
        if ('@Model.IsForCounterOffer' == 'True') {
            EnableControlsInCounterOfferCase();
            res = true;
        }
        else
        {
            res = validateQuoteSignatures(index)
        }
        if (res == true) {
            $('#ddlSpouseGender'+index).prop('disabled',false);
            $('#dtSpouseCoveredDOB_'+index).prop('disabled',false);
            $.post("/Policy/SaveQuotation", $("#fromQuotePage").serialize(), function (data) {
                $('#ddlSpouseGender'+index).prop('disabled',true);
                $('#dtSpouseCoveredDOB_'+index).prop('disabled',true);
                if (data.Message == 'Success') {
                    $('#QuoteModalBody').empty();
                    var Image='<img class="Img-align" src="../Images/checked1.png" />'
                    $("#hdnQuoteNo" + index).val(data.QuoteNo);
                    $("#hdnPrevQuoteNo" + index).val(data.QuoteNo);
                    var Message = '<p class="text-center"> Data Saved Successfully. Quote No is ' + data.QuoteNo + ' </p>';
                    $('#QuoteModalBody').append(Image);
                    $('#QuoteModalBody').append(Message);
                    $('#btnCreateProposal').show();
                    $("#QuoteModal").modal("show");
                }
                else {
                    $('#QuoteModalBody').empty();
                    var Image = '<img class="Img-align" src="../Images/cancel1.png" />'
                    var Message = "<p class='text-center'>" + data.ErrorMessage + "</p>";
                    $('#QuoteModalBody').append(Image);
                    $('#QuoteModalBody').append(Message);
                    $('#btnCreateProposal').hide();
                    $("#QuoteModal").modal("show");
                }
                if ('@Model.IsForCounterOffer' == 'True') {
                    SetControlsForCounteroffer();
                }
            });
            $('#ddlGender').prop("disabled", true);
            $('#dtProspectDOB').prop("disabled", true);
        }
    }

    function validateQuoteSignatures(index) {
        //debugger;
        if ($('#QuoteSignatureValue_'+index).val() == "") {  //$('#UploadSignature').val()=="" && && $('#HdnUploadSignPath').val()==""
            writeMultipleMessage("error", "Please Add Customer Signature", "QuoteSignatureID_@Model.SelectedQuote");
            return false;
        }
        else {
            writeMultipleMessage("error", "", "QuoteSignatureID_@Model.SelectedQuote");

        }
        if ($('#WPSignatureValue_' + index).val() == "") {  //$('#UploadSignature').val()=="" && && $('#HdnUploadSignPath').val()==""
            writeMultipleMessage("error", "Please  Add WP/FPE Signature", "WPSignatureID_@Model.SelectedQuote");
            return false;
        }
        else {
            writeMultipleMessage("error", "", "WPSignatureID_@Model.SelectedQuote");
            return true;

        }

    }
    function ModifyQuote(index) {
        $('#fromQuotePage' + index).find('input:not(.notdisb), textarea, select').attr('disabled', false);
        $('#buttonBenefitOverview_' + index).hide();
        $('#divButtons_' + index).hide();
        $('#btnCalculateQuote_' + index).show();
        $('#btnModify_' + index).hide();

        if ('@Model.IsForCounterOffer' == 'True') {
            SetControlsForCounteroffer();
        }
    }
    function DisplayBenifitOverview(index) {
        $("#BenifitOvervieModel_" + index).modal("show");
    }
    function GetBenefitDetails(tabindex, index, count, relationship) {
        var MemberCount = parseInt(count) - 1;
        $('#hdnPanelIndex' + index).val(tabindex);
        $('#hdnBenefitRequested' + tabindex).val(true);
        if ('@Model.IsForCounterOffer' == 'True') {
            EnableControlsInCounterOfferCase();
        }
        $.post('/Policy/GetBenifits', $("#fromQuotePage" + index).serialize(), function (data) {
            $('#DivBenefitDetails_' + tabindex).html('');
            $('#DivBenefitDetails_' + tabindex).html(data);
            var ValidCount = 0;
            $('.BenefitReq' + index).each(function (index) {
                if ($(this).val() == 'true') {
                    ValidCount++;
                }
            });
            if (MemberCount == ValidCount) {
                $('#DivPremiumSection_' + index).show();
            }

            if ('@Model.IsForCounterOffer' == 'True') {
                SetControlsForCounteroffer();
            }
        });

    }
    function ClearQuotation() {
        window.location.href = '/Home/Index';
    }
    function GetVariant(index, selectedvalue) {
        var Plan = $("#ddlPlan_" + index + " option:selected").text();
        $('#divAPCP_' + index).hide();
        if (Plan != '') {
            $.post("../Policy/GetVariant?Plan=" + Plan)
            .done(function (data) {
                if (data != null) {
                    $('#divPensionPeriod_' + index + '').hide();
                    $('#divDrawDownPeriod_' + index + '').hide();
                    $('#divMaturityBenifit_' + index + '').hide();
                    $('#divRetairemetAge_' + index + '').hide();
                    $('#divMonthlyIncome_' + index + '').hide();
                    $('#divSelfPay_' + index + '').hide();
                    $("#txtModalPremium" + index).val("");
                    $("#txtAnnualizePremium" + index).val("");
                    $("#ddlDrawDownPeriod" + index).val("");
                    $("#ddlLstdMaturityBenefit" + index + "").val("");
                    //$("#chkIsFamilyFloater_" + index).val("");
                    $("#ddlPensionPeriod" + index).val("");
                    $("#txtMonthlySurvivorIncome" + index).val("");
                    $("#ddlRetirementAge" + index).val("");
                    $("#txtPlanCode_" + index).val("");
                    $("#ddlVariant_" + index).html("");
                    if (selectedvalue == null || selectedvalue == "" || selectedvalue == undefined) {
                        $("#IsSpouseCovered" + index).attr("Checked", false);
                        $("#txtSpouseName_" + index).val("");
                        $("#ddlSpouseGender" + index).val("");
                        $("#dtSpouseCoveredDOB_" + index).val("");
                        $("#txtSpouseCoveredAge_" + index).val("");
                        $("#ddlSpouseOccupation" + index).val("");
                        $("#txtChildName" + index).val("");
                        $("#dtChildDOB" + index).val("");
                        $("#txtChildAge" + index).val("");
                        $("#ddlChildGender" + index).val("");
                        $("#IsChildCovered" + index).attr("Checked", false);
                        $("#txtNoofChilds" + index).val("");
                        $("#divSpousedetails_" + index).hide();
                        $("#divListChilddetails_" + index).hide();
                        $("#divChilddetails_" + index).hide();


                    }
                    if (selectedvalue == null || selectedvalue == '' || selectedvalue == undefined) {
                        //if(Plan=="Easy Pensions" || Plan=="Health Protector" || Plan=="Smart Pensions"|| Plan=="Education Plan")
                        //{
                            $.each(data.ObjLifeQuote.objProspect.ListVariant, function (key, value) {
                                $("#ddlVariant_" + index).append($("<option></option>").val(value.ID).html(value.Text));
                            });

                            GetPlanCode(index, 'False');
                            ClearBenifitDetails(index);
                        GetSAM(index, '', 'False', $("#ddlVariant_" + index).val());
                        //}
                    }
                    else{
                        $("#ddlVariant_" + index).append($('<option value=\'\'>Select</option>'));
                        $.each(data.ObjLifeQuote.objProspect.ListVariant, function (key, value) {
                            $("#ddlVariant_" + index).append($("<option></option>").val(value.ID).html(value.Text));
                        });

                    }

                    if (selectedvalue != null && selectedvalue != '' && selectedvalue != undefined) {
                        $("#ddlVariant_" + index).val(selectedvalue);
                        GetPlanCode(index, 'True');
                    }

                }
            });
        }
    }
    function GetPlanCode(index, IsModifyQuote) {
        var Variant = $("#ddlVariant_" + index).val();
        if (Variant != '') {
            $.post("../Policy/GetPlanCode?plan=" + Variant)

            .done(function (data) {
                if (data != null) {
                    var planCode = data.ObjLifeQuote.objProductDetials.PlanCode;
                    $("#txtPlanCode_" + index + "").val(planCode);


                    if (planCode == 'PPG' || planCode == 'SBE' || planCode == 'SBF' ||
                    planCode == 'PPH' || planCode == 'SBA' || planCode == 'SBB' || planCode == 'SBC' || planCode == 'SBD' ||
                    planCode == 'SBG' || planCode == 'SBH'|| planCode == 'LLP') {
                        $("#divPolicyTerm_" + index).html("");
                        $('#divPolicyTerm_' + index).html("<select class='form-control' id='ddlPolicyTerm_" + index + "' name='objListQuote[" + index + "].objProductDetials.PolicyTerm' onchange='GetPremiumTerm(" + index + ")'></select>");
                        $("#ddlPolicyTerm_" + index).append("<option value=\'\'>Select</option>");
                        $.each(data.ObjLifeQuote.LstPolicyTerm, function (key, value) {

                            $("#ddlPolicyTerm_" + index).append($("<option></option>").val(value.Text).html(value.Value));
                        });
                        if (IsModifyQuote == "True") {
                            $("#ddlPolicyTerm_" + index).val(_PolicyTerm);
                            GetPolicyTermSmartPension(index,_RetirementAge);
                        }
                    }
                    if (planCode == 'SBE' || planCode == 'SBF' ||
                     planCode == 'SBA' || planCode == 'SBB' ||
                     planCode == 'SBC' || planCode == 'SBD' ||
                     planCode == 'SBG' || planCode == 'SBH') {
                        $("#divPremiumTerm_" + index).html("");
                        $('#divPremiumTerm_' + index).html("<select class='form-control' id='ddlPremiumTerm_" + index + "' name='objListQuote[" + index + "].objProductDetials.PremiumTerm' onchange='GetPremiumTerm(" + index + ")'></select>");
                        $.each(data.ObjLifeQuote.LstPremiumTerm, function (key, value) {
                            $("#ddlPremiumTerm_" + index + "").append($("<option></option>").val(value.Text).html(value.Value));

                        });
                        if (IsModifyQuote == "True") {
                            $("#ddlPremiumTerm_" + index + "").val(_PremiumTerm);
                            GetPolicyTermSmartPension(index,_RetirementAge);

                        }
                    }
                    $("#ddlPrefMode" + index).html("");
                    $.each(data.ObjLifeQuote.lstPrefMode, function (key, value) {
                        $("#ddlPrefMode" + index + "").append($("<option></option>").val(value.Value).html(value.Text));

                    });


                    if (planCode == 'PPG' || planCode == 'HPA'
                        || planCode == 'PPH' || planCode == 'EPB'|| planCode == 'LLP') {
                        $("#divPremiumTerm_" + index + "").html("");
                        $("#divPremiumTerm_" + index + "").html("<input class='form-control valid' id='TxtPremiumTerm_" + index + "' name='objListQuote[" + index + "].objProductDetials.PremiumTerm' value='' aria-invalid='false' type='text'  , onkeypress = 'return isNumberKey(event)', onkeyup ='return isNumberTabkey(event)'>");
                        if (IsModifyQuote == "True") {
                            $("#TxtPremiumTerm_" + index + "").val(_PremiumTerm);
                            GetPolicyTermSmartPension(index,_RetirementAge);
                        }
                    }
                    if (planCode == 'HPA' || planCode == 'EPB') {
                        $("#divPolicyTerm_" + index + "").html("");
                        $("#divPolicyTerm_" + index + "").html("<input class='form-control valid' id='txtPolicyTerm_" + index + "' name='objListQuote[" + index + "].objProductDetials.PolicyTerm' value='' aria-invalid='false' type='text' onblur='GetPremiumTermHealthProtector(" + index + ")' , onkeypress = 'return isNumberKey(event)', onkeyup = 'return isNumberTabkey(event)'>");
                        if (IsModifyQuote == "True") {
                            GetPolicyTermSmartPension(index,_RetirementAge);
                            $("#txtPolicyTerm_" + index + "").val(_PolicyTerm);
                        }
                    }
                    if (planCode == 'EPB') {
                        $('#divChkBoxHealthProtector_' + index + '').hide();
                    }
                    if (planCode == 'PPH') {

                        $('#divPensionPeriod_' + index + '').show();
                        $('#divEasyPensionPeriod_' + index + '').hide();
                        $('#divDrawDownPeriod_' + index + '').hide();
                        $('#divRetairemetAge_' + index + '').hide();
                        $('#divMonthlyIncome_' + index + '').hide();
                        $('#divSelfPay_' + index + '').hide();

                        $('#divChkBoxHealthProtector2_' + index + '').hide();
                        if (IsModifyQuote == "True") {
                            $("#ddlPensionPeriod" + index + "").val(_PensionPeriod);
                        }
                    }
                    if (planCode == 'PPG' || planCode == 'LLP') {
                        debugger;
                        $('#divPensionPeriod_' + index + '').show();
                        $('#divDrawDownPeriod_' + index + '').hide();
                        $('#divRetairemetAge_' + index + '').hide();
                        $('#divMonthlyIncome_' + index + '').hide();
                        $('#divSelfPay_' + index + '').hide();

                        $('#divChkBoxHealthProtector2_' + index + '').hide();
                        if (IsModifyQuote == "True") {
                            $("#ddlPensionPeriod" + index + "").val(_PensionPeriod);
                        }
                    }
                    if (planCode == 'SBE' || planCode == 'SBF' || planCode == 'SBA' || planCode == 'SBB' || planCode == 'SBC' || planCode == 'SBD' || planCode == 'SBG' || planCode == 'SBH') {

                        $('#divDrawDownPeriod_' + index + '').show();
                        $('#divEasyPensionPeriod_' + index + '').hide();
                        $('#divPensionPeriod_' + index + '').hide();
                        $('#divRetairemetAge_' + index + '').hide();
                        $('#divMonthlyIncome_' + index + '').hide();
                        $('#divSelfPay_' + index + '').hide();
                        $('#divChkBoxHealthProtector_' + index + '').hide();
                        $('#divChkBoxHealthProtector2_' + index + '').hide();
                        if (IsModifyQuote == "True") {
                            $("#ddlDrawDownPeriod" + index + "").val(_DrawDownPeriod);
                        }
                    }
                    if (planCode == 'SBE' || planCode == 'SBF' || planCode == 'SBA' || planCode == 'SBB' || planCode == 'SBC' || planCode == 'SBD') {

                        $("#divMaturityBenifit_" + index + "").show();
                        if (IsModifyQuote == "True") {
                            $("#ddlLstdMaturityBenefit" + index + "").val(_MaturityBenefit);
                        }
                    }
                    if (planCode == 'SBG' || planCode == 'SBH' || planCode == 'PPH' || planCode == 'PSP' || planCode == 'PPG' || planCode == 'HPA' || planCode == 'EPB'|| planCode == 'LLP') {
                        $("#divMaturityBenifit_" + index + "").hide();
                    }

                    if (planCode == 'PPH' || planCode == 'PSP') {
                        $('#divRetairemetAge_' + index + '').show();
                        $('#divMonthlyIncome_' + index + '').show();
                        $('#divChkBoxHealthProtector_' + index + '').show();
                        $('#divDrawDownPeriod_' + index + '').hide();
                        $('#divSelfPay_' + index + '').hide();
                        $('#divChkBoxHealthProtector2_' + index + '').hide();
                        $("#divPolicyTerm_" + index + "").html("<input class='form-control valid' id='TxtPolicyTerm_" + index + "' name='objListQuote[" + index + "].objProductDetials.PolicyTerm' value='' aria-invalid='false' type='text'  , onkeypress = 'return isNumberKey(event)',onkeyup = 'return isNumberTabkey(event)'>");
                        if (IsModifyQuote == "True") {
                            $("#ddlRetirementAge" + index + "").val(_RetirementAge);
                            $("#txtMonthlySurvivorIncome" + index + "").val(_MonthlySurvivorIncome);
                            $("#TxtPolicyTerm_" + index + "").val(_PremiumTerm);
                            GetPolicyTermSmartPension(index,_RetirementAge);

                        }

                    }
                    if (planCode == 'HPA') {
                        $('#divSelfPay_' + index + '').show();
                        $('#divChkBoxHealthProtector_' + index + '').show();
                        $('#divChkBoxHealthProtector2_' + index + '').show();
                        $('#divPensionPeriod_' + index + '').hide();
                        $('#divEasyPensionPeriod_' + index + '').hide();
                        $('#divDrawDownPeriod_' + index + '').hide();
                        $('#divRetairemetAge_' + index + '').hide();
                        $('#divMonthlyIncome_' + index + '').hide();
                        $('#divAnnualizePremium_' + index).hide();
                        if (IsModifyQuote == "True") {
                            $("#IsSelfPay" + index + "").val(_IsSelfPay);
                            //$("#chkIsFamilyFloater_" + index + "").val(_IsFamilyFloater);
                            $("#chkDeductable" + index + "").val(_Deductable);

                        }


                    }
                    if (planCode == 'PPH' || planCode == 'HPA' || planCode == 'EPB') {

                        $('#divSpouseCovered_' + index + '').show();
                        $('#divChildCovered_' + index + '').show();
                        if (IsModifyQuote == "True") {
                            //$("#IsSpouseCovered" + index + "").val(_IsSpouseCovered);
                            //$("#IsChildCovered" + index + "").val(_IsChildCovered);
                        }

                    }
                    if (planCode == 'SBE' || planCode == 'SBF' || planCode == 'SBA' || planCode == 'SBB' || planCode == 'SBC' || planCode == 'SBD' || planCode == 'PPG' || planCode == 'SBG' || planCode == 'SBH'|| planCode == 'LLP') {
                        $('#divSpouseCovered_' + index + '').hide();
                        $('#divChildCovered_' + index + '').hide();
                        $('#divChilddetails_' + index + '').hide();
                        $('#divListChilddetails_' + index + '').hide();
                        $('#divSpousedetails_' + index + '').hide();

                    }
                    if (planCode == "PPG"|| planCode == 'LLP') {
                        $('#divAnnualizePremium_' + index).show();
                        $('#divChkBoxHealthProtector_' + index + '').hide();
                        $('#divBasicSum_' + index).html("");
                        $('#divBasicSum_' + index).html("<select class='form-control' data-val='true' data-val-number='The field BasicSumInsured must be a number.' data-val-required='The BasicSumInsured field is required.' id='ddlBasicSumInsured" + index + "'' name='objListQuote[0].objProductDetials.BasicSumInsured' onchange='GetAnnualPremium(" + index + ")'>"
                            + "<option value= '' > Select</option>"
                            + "<option value='360000'>360,000</option>"
                            + "<option value='480000'>480,000</option>"
                            + "<option value='600000'>600,000</option>"
                            + "<option value='720000'>720,000</option></select >");
                        $('#ddlSAM' + index).val("");
                        $('#divSAM_' + index).hide();
                        if (IsModifyQuote == "True") {
                            $('#ddlBasicSumInsured' + index).val(_BasicSumInsured);

                        }
                    }

                    if (planCode == "PPH"||planCode == "EPB") {
                        $('#divModalPremium_' + index).show();
                        $('#txtAnnualizePremium' + index).attr("readonly", true);
                        if (IsModifyQuote == "True") {
                            $('#hdntxtModalPremium' + index).val(_ModalPremium);
                            f2("txtModalPremium" + index);


                        }
                    }
                    if (planCode != "PPH"&& planCode != "EPB") {
                        $('#divModalPremium_' + index).hide();
                    }

                    if (planCode == "HPA") {
                        $('#divBasicSum_' + index).html("");
                        $('#divBasicSum_' + index).html("<input type='text' id='txtBasicSumInsured_" + index + "'  class='form-control' maxlength='12', onchange=f1(id),ClearBenifitDetails(" + index + ")  , onkeypress = 'return isNumberKey(event)'/><input type='hidden' name='objListQuote[" + index + "].objProductDetials.BasicSumInsured' id='hdntxtBasicSumInsured_" + index + "'/>");
                        $('#ddlSAM' + index).val("");
                        $('#divSAM_' + index).hide();
                        if (IsModifyQuote == "True") {
                            $('#hdntxtBasicSumInsured_' + index).val(_BasicSumInsured);
                            f2("txtBasicSumInsured_" + index);

                        }

                    }
                    if (planCode == "EPB" || planCode == "SBE" || planCode == 'SBF' ||
                      planCode == "PPH" || planCode == 'SBA' || planCode == 'SBB' ||
                        planCode == 'SBC' || planCode == 'SBD' ||
                        planCode == "SBG" || planCode == "SBH") {
                        $('#divBasicSum_' + index).html("");
                        $('#divBasicSum_' + index).html("<input type='text' id='txtBasicSumInsured_" + index + "'  class='form-control' maxlength='12'  , onkeypress = 'return isNumberKey(event)'/><input type='hidden' name='objListQuote[" + index + "].objProductDetials.BasicSumInsured' id='hdntxtBasicSumInsured_" + index + "' />");
                        $('#ddlSAM' + index).val("");
                        $('#divSAM_' + index).show();
                        $('#divAnnualizePremium_' + index).show();
                        $("#txtAnnualizePremium" + index).val("");

                        $('#txtBasicSumInsured_' + index).attr("readonly", true);
                        if (IsModifyQuote == "True") {
                            $('#hdntxtBasicSumInsured_' + index).val(_BasicSumInsured);
                            f2("txtBasicSumInsured_" + index);
                            $('#ddlSAM' + index).val(_SAM);


                        }
                    }
                    //if (planCode != "HPA") {
                    if (IsModifyQuote == "True") {
                        $("#ddlPrefMode" + index + "").val(_PrefferedMode);
                        $('#hdntxtAnnualizePremium' + index).val(_AnnualizePremium);
                        f2("txtAnnualizePremium" + index);

                    }
                    //}

                }
            });


        }
        else {
            $("#txtPlanCode_" + index + "").val("");
        }
    }
    function GetSAM(index, selectedvalue, ModifyQuote, Variant) {

        if (ModifyQuote != "True") {

            Variant = $("#ddlVariant_" + index).val();

        }
        //Variant = $("#ddlVariant_" + index).val();
        var Age = $("#txtAge").val();
        if (Age != "") {
            $.post("../Policy/GetSAM?plan=" + Variant + '&Age=' + Age)

           .done(function (data) {
               if (data != null ) {

                   if($.isArray(data))
                   {
                       $("#ddlSAM" + index).html("");
                       $("#ddlSAM" + index).append("<option value=\'\'>Select</option>");
                       $.each(data, function (key, value) {

                           $("#ddlSAM" + index).append($("<option></option>").val(value.Text).html(value.Value));
                       })

                       if (selectedvalue != null && selectedvalue != '' && selectedvalue != undefined) {
                           $("#ddlSAM" + index).val(selectedvalue);
                       }
                   }

               }
           })


        }


    }
    function f1(id) {

        var res = $('#' + id).val();
        if (res == "") {
            res = "0";
        }
        $('#' + id).val(parseInt(res.replace(/,/g, '')).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ','));
        $('#hdn' + id).val(res.replace(/,/g, ''));
    }
    function f2(id) {

        var res = $('#hdn' + id).val();
        if (res != undefined) {
            $('#' + id).val(parseInt(res.replace(/,/g, '')).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ','));
        }
    }
    function EnablePopUp(index) {
        debugger;
        var BasicPremium = parseInt($('#hdntxtBenefitPremium' + index + '00').val());
        var PrevPremium = parseInt($('*[data-name="AnnualPremium"]').text());
        if (isNaN(PrevPremium)) {
            PrevPremium = 0;
        }
        var PrefMode = parseInt($('#ddlPrefMode' + index).val());
        if (PrefMode == 02) {
            BasicPremium = BasicPremium * 2;
        }
        else if (PrefMode == 04) {
            BasicPremium = BasicPremium * 4;
        }
        else if (PrefMode == 12) {
            BasicPremium = BasicPremium * 12;
        }
        var Premium = BasicPremium + PrevPremium;
        if (Premium >= 250000) {
            $('#AFCModal').modal('show');
            $('#hdnAfc'+index).val('True');
        }
        else if (Premium < 250000 && Premium >= 200000) {
            $('#LessAFCModal').modal('show');
        }
    }
    function MonthlyPopup(index){

        var PreferedMode = $("#ddlPrefMode" + index).val();
        var Plancode = $("#txtPlanCode_" + index).val();
        var Premium = parseInt($("#hdntxtAnnualPremium" + index).val());
        var Message = "";
        if (PreferedMode == "12") {

            if (Plancode == "PPG" || Plancode == "SBF") {
                Message = "As Preferred Mode is monthly You have to take 3 month advance premium at the time of payment for the selected product";
                $('#MonthlyPopup').html(Message);
                $("#QuoteModal1").modal("show");
            }
            else if (Plancode == "SBB" || Plancode == "PPH" || Plancode == "EPB" || Plancode == "SBD") {
                if (Premium < 12000) {
                    Message = "As Preferred Mode is monthly You have to take 2 month advance premium at the time of payment for the selected product";
                    $('#MonthlyPopup').html(Message);
                    $("#QuoteModal1").modal("show");
                }
                else {
                    SaveQuotation(index);
                }
            }
            else {
                SaveQuotation(index);
            }

        }
        else {
            SaveQuotation(index);
        }

    }
    function DeleteChild(index, childIndex) {
        Message = '<p class="text-center"> You are about to delete a child. Are you sure? </p>';
        $('#ChildDeletionModalBody').empty();
        var Image = '<img class="Img-align" src="../Images/warning1.png" />'
        $('#ChildDeletionModalBody').append(Image);
        $('#ChildDeletionModalBody').append(Message);
        $("#ChildDeletionModalFooter").html("");
        var buttons = "<button type='button' class='btn btn-secondary' data-dismiss='modal' onclick='DeleteChildConfirmation("+index+","+ childIndex+")'>Yes</button>"
            + "<button type='button' class='btn btn-secondary' data-dismiss='modal'>No</button>";
        $("#ChildDeletionModalFooter").html(buttons)
        $("#ChildDeletionModal").modal("show");
    }
    function DeleteChildConfirmation(index, childIndex) {
        $("#hdnChildDeleteIndex" + index).val(childIndex);
        var objectQuote = $("#fromQuotePage").serialize();
        $("#divListChilddetails_" + index).html("");
        $("#divListChilddetails_" + index).empty();
        $.post('/Policy/DeleteChildDetails', objectQuote, function (childData) {
            $("#divListChilddetails_" + index).html(childData);
            var childCount = parseInt($('#txtNoofChilds' + index).val());
            if (childCount > 0) {
                $('#txtNoofChilds' + index).val(parseInt($('#txtNoofChilds' + index).val()) - 1);
            }
            if (parseInt($('#txtNoofChilds' + index).val()) == 0) {
                $("#IsChildCovered" + index).attr('checked', false);
                $("#IsChildCovered" + index).attr("disabled", true);
                $("#divChilddetails_" + index).hide();
            }
        });
        ClearBenifitDetails(index);
    }

    $("#ddlSpouseOccupation"+@Model.SelectedQuote).autocomplete({

        source: function (request, response) {
            $.ajax({
                url: "../Suspect/GetOccupation",
                type: "POST",
                dataType: "json",
                data: { Prefix: request.term },
                success: function (data) {
                    response($.map(data, function (item) {

                        return { label: item.Text, value: item.value };
                    }))
                }
            })
        },
        minLength: 2,
        messages: {
            noResults: "",
            results: function (count) {
                return count + (count > 1 ? ' results' : ' result ') + ' found';
            }
        }
    });
    var value = false;
    $("#hdnAutOccupation").val(value);
    $("#ddlSpouseOccupation"+@Model.SelectedQuote).on("autocompleteselect", function (event, u) {

        value = true;
        $("#hdnAutOccupation").val(value);

    })

    function SpouseFetchDOBGenderfromNIC(e, dob, gender, Age) {
        var NICNo = $('#' + e).val();
        NICNo = NICNo.trim();
        writeMultipleMessage("error", "", e)
        if (NICNo == "") {
            $('#'+gender).prop("disabled", false);
            $('#'+gender).prop("readonly", false);
            $('#'+dob).prop("disabled", false);
            $('#'+dob).prop("readonly", false);
            // writeMultipleMessage("error", "Please Enter SSN Number", e);
            return false;
        }
        //if (NICNo.toUpperCase() == "SLC") {
        //    $('#ddlGender').prop("disabled", false);
        //    $('#dtProspectDOB').prop("disabled", false);
        //    return true;
        //}
        if (NICNo != null && NICNo != "") {
            if (NICNo.length == 12 || NICNo.length == 10) {
                if (NICNo.length == 12) {
                    var nofdays = NICNo.substr(4, 3);
                    var dobyears = NICNo.substr(0, 4);
                }
                else if (NICNo.length == 10) {

                    NICArray = NICNo.split("");
                    if (NICArray[9].toUpperCase() == "X" || NICArray[9].toUpperCase() == "V") {
                        var nofdays = NICNo.substr(2, 3);
                        var dobyears = NICNo.substr(0, 2);
                    }
                    else {
                        writeMultipleMessage("error", "Please Enter Valid SSN Number", e);
                        return false;

                    }
                }
                $.post("../../AgentonBoarding/FetchDateMonth?NIC=" + NICNo)
                    .done(function (data) {
                        if (data != "Error") {
                            $("#" + dob).val(data);
                            $("#" + dob).prop("disabled", true);
                            if (nofdays <= 366 && nofdays >= 0) {
                                $("#" + gender).val("M");
                                $("#" + gender).prop('disabled', true);
                            }
                            else if (nofdays > 500 && nofdays <= 866) {
                                $("#" + gender).val("F");
                                $("#" + gender).prop('disabled', true);
                            }
                            var dobvalue = $('#' + dob).val();
                            var d = new Date();
                            var month = d.getMonth() + 1;
                            var day = d.getDate();
                            var currentDate = (day < 10 ? '0' : '') + day + '/' + (month < 10 ? '0' : '') + month + '/' + d.getFullYear();
                            var arrDOB = dobvalue.split('/');
                            var birthDay = arrDOB[0];
                            var birthMonth = arrDOB[1];
                            var birthYear = arrDOB[2];
                            var arrCurrentDate = currentDate.split('/');
                            var currentDay = arrCurrentDate[0];
                            var currentMonth = arrCurrentDate[1];
                            var currentYear = arrCurrentDate[2];
                            var calYear = currentYear - birthYear;
                            var CalMonth = currentMonth - birthMonth;
                            if (birthYear <= currentYear) {
                                if (birthMonth <= currentMonth) {
                                    if (birthDay <= currentDay) {
                                    }
                                    else if (birthDay > currentDay && birthMonth < currentMonth) {
                                    }
                                    else if (birthDay > currentDay && birthMonth >= currentMonth && birthYear < currentYear) {
                                    }
                                    else {
                                        writeMultipleMessage("error", "Please Enter Valid SSN Number", e);
                                    }
                                }
                                else if (birthMonth > currentMonth && birthYear < currentYear) {
                                }
                                else {
                                    writeMultipleMessage("error", "Please Enter Valid SSN Number", e);
                                }
                            }
                            else {
                                writeMultipleMessage("error", "Please Enter Valid SSN Number", e);
                            }
                        }
                        else {
                            writeMultipleMessage("error", "Your SSN Number, Gender or Date of Birth Invalid", e);
                            //return false;
                        }
                        if (CalMonth < 0 || (CalMonth === 0 && currentDay < birthDay)) {
                            calYear--;
                        }
                        $("#"+Age).val(calYear + 1);
                        if ($("#"+gender).val() == $('#ddlGender').val()) {
                            writeMultipleMessage("error", "Please Enter Correct NIC. It does not reflect same as per the gender", e);
                        }
                    });
            }
            else {
                writeMultipleMessage("error", "SSN Number should be 12 or 10 Digits", e);
                return false;
            }
        }
        ClearBenifitDetails(@Model.SelectedQuote);
    }
</script>
